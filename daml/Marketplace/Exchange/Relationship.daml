module Marketplace.Exchange.Relationship where

import DA.Finance.Asset
import DA.Finance.Asset.Settlement
import DA.Finance.Types
import Marketplace.Trading

template ExchangeMembershipInvitation
  with
    operator : Party
    exchange : Party
    member : Party
  where
    signatory operator, exchange

    controller member can
      Accept : ContractId ExchangeMembership
        with
          tradingAccountId : Id
          allocationAccountId : Id
        do
          -- TODO: Check necessary conditions, ie. both are visibe to the exchange and exchange is nominee on allocationAccount
          create ExchangeMembership with ..

      Decline : ()
        do
          return ()

template ExchangeMembership
  with
    operator : Party
    exchange : Party
    member : Party
    tradingAccountId : Id
    allocationAccountId : Id
  where
    signatory operator, exchange, member

    key (operator, exchange, member) : (Party, Party, Party)
    maintainer key._1

    controller member can
      nonconsuming RequestCreateOrder : (ContractId CreateOrderRequest, ContractId AssetDeposit)
        with
          market : Text
          asset : Asset
          price : Asset
          isBid : Bool
          depositCid : ContractId AssetDeposit
        do
          depositCid <- exerciseByKey @AssetSettlementRule tradingAccountId AssetSettlement_Transfer with receiverAccountId = allocationAccountId; ..
          createOrderRequestCid <- create CreateOrderRequest with ..
          pure (createOrderRequestCid, depositCid)

      nonconsuming RequestCancelOrder : ContractId CancelOrderRequest
        with
          orderCid : ContractId Order
        do
          create CancelOrderRequest with ..

    controller exchange can
      nonconsuming CreateOrder : ContractId Order
        with
          createOrderRequestCid : ContractId CreateOrderRequest
        do
          CreateOrderRequest{..} <- fetch createOrderRequestCid
          archive createOrderRequestCid
          create Order with ..

      nonconsuming CancelOrder : ContractId AssetDeposit
        with
          cancelOrderRequestCid : ContractId CancelOrderRequest
        do
          cancelOrderRequest <- fetch cancelOrderRequestCid
          archive cancelOrderRequestCid
          order <- fetch cancelOrderRequest.orderCid
          archive cancelOrderRequest.orderCid
          exerciseByKey @AssetSettlementRule allocationAccountId AssetSettlement_Transfer with depositCid = order.depositCid; receiverAccountId = tradingAccountId
