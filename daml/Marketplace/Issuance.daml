module Marketplace.Issuance where

import DA.Finance.Asset
import DA.Finance.Asset.Settlement
import DA.Finance.Types
import Marketplace.AssetDescription (AssetDescription)

type T = Issuance

template Issuance
  with
    operator : Party
    provider : Party
    client : Party
    issuanceId : Text
    assetId : Id
    accountId : Id
    quantity : Decimal
  where
    signatory operator, provider, client

    key (operator, provider, issuanceId) : (Party, Party, Text)
    maintainer key._1

template Service
  with
    operator : Party
    provider : Party
    client : Party
  where
    signatory operator, provider, client

    key (operator, provider, client) : (Party, Party, Party)
    maintainer key._1

    controller client can
      nonconsuming RequestOrigination: ContractId OriginationRequest
        with
          description: AssetDescription
        do
          create OriginationRequest with ..
          
      nonconsuming RequestCreateIssuance : ContractId CreateIssuanceRequest
        with
          issuanceId : Text
          accountId : Id
          assetId : Id
          quantity : Decimal
        do
          create CreateIssuanceRequest with ..

      nonconsuming RequestReduceIssuance : ContractId ReduceIssuanceRequest
        with
          issuanceId : Text
          accountId : Id
          depositCid : ContractId AssetDeposit
        do
          create ReduceIssuanceRequest with ..

    controller provider can
      nonconsuming Originate: ContractId AssetDescription
        with
          createOriginationCid: ContractId OriginationRequest
        do
          OriginationRequest{description} <- fetch createOriginationCid
          -- assertMsg "issued must be 0" $ description.issued == 0.0
          -- assertMsg "authorized must be > 0" $ description.authorized > 0.0
          archive createOriginationCid
          create description

      nonconsuming CreateIssuance : (ContractId Issuance, ContractId AssetDeposit)
        with
          createIssuanceRequestCid : ContractId CreateIssuanceRequest
        do
          CreateIssuanceRequest{..} <- fetch createIssuanceRequestCid
          Some _ <- lookupByKey @AssetDescription assetId
          archive createIssuanceRequestCid
          issuanceCid <- create Issuance with ..
          let asset = Asset with id = assetId; quantity
          depositCid <- exerciseByKey @AssetSettlementRule accountId AssetSettlement_Credit with ctrl = provider; ..
          pure (issuanceCid, depositCid)

      nonconsuming ReduceIssuance : ContractId Issuance
        with
          reduceIssuanceRequestCid : ContractId ReduceIssuanceRequest
        do
          ReduceIssuanceRequest{..} <- fetch reduceIssuanceRequestCid
          archive reduceIssuanceRequestCid
          deposit <- fetch depositCid
          exerciseByKey @AssetSettlementRule accountId AssetSettlement_Debit with ..
          (issuanceCid, issuance) <- fetchByKey @Issuance (operator, provider, issuanceId)
          archive issuanceCid
          create issuance with quantity = issuance.quantity - deposit.asset.quantity

template Offer
  with
    operator : Party
    provider : Party
    client : Party
  where
    signatory operator, provider

    controller client can
      Accept : ContractId Service
        do
          create Service with ..

      Decline : ()
        do
          return ()

template Request
  with
    operator : Party
    client : Party
    provider : Party
  where
    signatory operator, client

    controller provider can
      Approve : ContractId Service
        do
          create Service with ..

      Reject : ()
        do
          return ()

template CreateIssuanceRequest
  with
    operator : Party
    provider : Party
    client : Party
    issuanceId : Text
    assetId : Id
    accountId : Id
    quantity : Decimal
  where
    signatory operator, provider, client

template ReduceIssuanceRequest
  with
    operator : Party
    provider : Party
    client : Party
    issuanceId : Text
    accountId : Id
    depositCid : ContractId AssetDeposit
  where
    signatory operator, provider, client

template OriginationRequest
  with
     description: AssetDescription
  where
     signatory description.asset.id.signatories
