module Marketplace.Issuance where

import DA.Finance.Asset
import DA.Finance.Asset.Settlement
import DA.Finance.Types
import DA.Next.Set (Set)
import Marketplace.AssetDescription (AssetDescription(..), Claims)
import ContingentClaims.Claim (Claim, Claim(..), ClaimF(..), deserialize, serialize)
import ContingentClaims.Observation (Observation)
import Daml.Control.Recursion

type T = Issuance

-- TODO: don't export
type C = Claim Observation Date Id
type F = ClaimF Observation Date Id

template Issuance
  with
    operator : Party
    provider : Party
    client : Party
    issuanceId : Text
    assetId : Id
    accountId : Id
    quantity : Decimal
  where
    signatory operator, provider, client

    key (operator, provider, issuanceId) : (Party, Party, Text)
    maintainer key._1

template Service
  with
    operator : Party
    provider : Party
    client : Party
  where
    signatory operator, provider, client

    key (operator, provider, client) : (Party, Party, Party)
    maintainer key._1

    controller client can
      nonconsuming RequestOrigination: ContractId OriginationRequest
        with
          assetLabel: Text
          assetSignatories: Set Party
          description: Text
          issuer: Party
          claims: Claims
          safekeepingAccountId: Id
        do
          create OriginationRequest with ..
          
      nonconsuming RequestCreateIssuance : ContractId CreateIssuanceRequest
        with
          issuanceId : Text
          accountId : Id
          assetId : Id
          quantity : Decimal
        do
          create CreateIssuanceRequest with ..

      nonconsuming RequestReduceIssuance : ContractId ReduceIssuanceRequest
        with
          issuanceId : Text
          accountId : Id
          depositCid : ContractId AssetDeposit
        do
          create ReduceIssuanceRequest with ..

    controller provider can
      nonconsuming Originate: [ContractId AssetDescription]
        with
          createOriginationCid: ContractId OriginationRequest
        do
          OriginationRequest{..} <- fetch createOriginationCid
          let genAssetDescriptionVersions: C -> [C]
              genAssetDescriptionVersions = concat . para levels
                where
                  levels : F (C, [[C]]) -> [[C]] -- each inner list has the subtrees at that level
                  levels ZeroF = [[Zero]]
                  levels (OneF id) = [[One id]]
                  levels (GiveF (claim, cs)) = [Give claim] :: cs
                  levels (ScaleF o (claim, cs)) = [Scale o claim] :: cs
                  levels (WhenF o (claim, cs)) = [When o claim] :: cs
                  levels (OrF (claim, cs) (claim', cs')) = [Or claim claim'] :: zipWithLongest (<>) (cs, cs')
                  levels (AndF (claim, cs) (claim', cs')) = [And claim claim'] :: zipWithLongest (<>) (cs, cs')
                  levels (CondF o (claim, cs) (claim', cs')) = [Cond o claim claim'] :: zipWithLongest (<>) (cs, cs')
                  zipWithLongest f = apo \case
                      ([], []) -> Nil
                      (a :: as, []) -> Cons a (Left as)
                      ([], a' :: as') -> Cons a' (Left as')
                      (a :: as, a' :: as') -> Cons (f a a') (Right (as, as'))
              zipWithIndex = ana \case
                (_, []) -> Nil
                (i, x :: xs) -> Cons (i, x) (succ i, xs)
          -- assertMsg "issued must be 0" $ description.issued == 0.0
          -- assertMsg "authorized must be > 0" $ description.authorized > 0.0
          archive createOriginationCid
          forA (zipWithIndex . (0, ) . genAssetDescriptionVersions . deserialize $ claims) \(i, unserializedClaims) ->
            let claims = serialize unserializedClaims in
            create AssetDescription with assetId = Id with label = assetLabel
                                                           signatories = assetSignatories
                                                           version = i
                                         ..

      nonconsuming CreateIssuance : (ContractId Issuance, ContractId AssetDeposit)
        with
          createIssuanceRequestCid : ContractId CreateIssuanceRequest
        do
          CreateIssuanceRequest{..} <- fetch createIssuanceRequestCid
          Some _ <- lookupByKey @AssetDescription assetId
          archive createIssuanceRequestCid
          issuanceCid <- create Issuance with ..
          let asset = Asset with id = assetId; quantity
          depositCid <- exerciseByKey @AssetSettlementRule accountId AssetSettlement_Credit with ctrl = provider; ..
          pure (issuanceCid, depositCid)

      nonconsuming ReduceIssuance : ContractId Issuance
        with
          reduceIssuanceRequestCid : ContractId ReduceIssuanceRequest
        do
          ReduceIssuanceRequest{..} <- fetch reduceIssuanceRequestCid
          archive reduceIssuanceRequestCid
          deposit <- fetch depositCid
          exerciseByKey @AssetSettlementRule accountId AssetSettlement_Debit with ..
          (issuanceCid, issuance) <- fetchByKey @Issuance (operator, provider, issuanceId)
          archive issuanceCid
          create issuance with quantity = issuance.quantity - deposit.asset.quantity

template Offer
  with
    operator : Party
    provider : Party
    client : Party
  where
    signatory operator, provider

    controller client can
      Accept : ContractId Service
        do
          create Service with ..

      Decline : ()
        do
          return ()

template Request
  with
    operator : Party
    client : Party
    provider : Party
  where
    signatory operator, client

    controller provider can
      Approve : ContractId Service
        do
          create Service with ..

      Reject : ()
        do
          return ()

template CreateIssuanceRequest
  with
    operator : Party
    provider : Party
    client : Party
    issuanceId : Text
    assetId : Id
    accountId : Id
    quantity : Decimal
  where
    signatory operator, provider, client

template ReduceIssuanceRequest
  with
    operator : Party
    provider : Party
    client : Party
    issuanceId : Text
    accountId : Id
    depositCid : ContractId AssetDeposit
  where
    signatory operator, provider, client

template OriginationRequest
  with
    assetLabel: Text
    assetSignatories: Set Party
    description: Text
    issuer: Party
    claims: Claims
    safekeepingAccountId: Id
  where
     signatory assetSignatories
