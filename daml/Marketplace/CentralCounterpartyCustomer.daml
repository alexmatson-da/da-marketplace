module Marketplace.CentralCounterpartyCustomer where

import qualified DA.Next.Set as Set

import Marketplace.Notification
import Marketplace.Transfer
import Marketplace.Utils

import DA.Finance.Asset
import DA.Finance.Asset.Settlement
import DA.Finance.Types
import DA.List


template CCPCustomerInvitation
  with
    operator : Party
    ccp : Party
    ccpCustomer : Party
    custodian : Party
  where
    signatory ccp

    controller ccpCustomer can
      CCPCustomerInvitation_Accept : ContractId CCPCustomer
        with
          clearingDepositCid : ContractId AssetDeposit
          marginDepositCid : ContractId AssetDeposit
        do
          let custodianAccountId = getAccountId ccpCustomer custodian [custodian]
              accountId = getAccountId ccpCustomer ccp [custodian]

              custodianAccount = Account
                with id = custodianAccountId, provider = custodian, owner = ccpCustomer

              ccpAccount = Account
                with id = accountId, provider = ccp, owner = ccpCustomer

          create DismissibleNotification with
            sender = ccpCustomer, senderRole = Some InvestorRole
            receiver = ccp, text = "CCP customer invitation accepted."
          create CCPCustomer with inGoodStanding = True, clearingDepositCids = [clearingDepositCid], ..

      CCPCustomerInvitation_Reject : ()
        do
          create DismissibleNotification with
            sender = ccpCustomer, senderRole = Some InvestorRole
            receiver = ccp, text = "CCP customer invitation rejected."
          return ()


template CCPCustomer
  with
    operator : Party
    ccp : Party
    custodian : Party
    ccpCustomer : Party
    clearingDepositCids : [ContractId AssetDeposit]
    marginDepositCid : ContractId AssetDeposit
    inGoodStanding : Bool
  where
    signatory ccp, ccpCustomer

    key (ccp, operator, ccpCustomer) : (Party, Party, Party)
    maintainer key._1

    controller ccp can
      CCPCustomer_PerformMarginFill : ContractId CCPCustomer
        with
          targetAmount : Decimal
        do
          marginDeposit <- fetch marginDepositCid

          clearingDepositCid <- exercise (head clearingDepositCids) AssetDeposit_Merge
              with depositCids = tail clearingDepositCids

          let netDiff =  marginDeposit.asset.quantity - targetAmount
          case netDiff of
            0.0    -> create this
            amount -> do
              if amount > 0.0
              then do
                -- move money from clearing account to margin account
                (custCcpRelationshipCid,_) <- fetchByKey @CCPCustodianRelationship (custodian, ccp)
                clearingDeposit <- fetch clearingDepositCid
                if clearingDeposit.asset.quantity <= amount
                then create this with inGoodStanding = False
                else do
                  newDepositCids <- exercise clearingDepositCid AssetDeposit_Split with quantities = [amount]
                  case newDepositCids of
                    []               -> create this with inGoodStanding = False
                    [diffDepositCid] -> create this with inGoodStanding = False, clearingDepositCids = [diffDepositCid]
                    (diffDepositCid::remainingClearingCids) -> do
                      newMarginDepositCid <- exercise marginDepositCid AssetDeposit_Merge with depositCids = [diffDepositCid]
                      create this with clearingDepositCids = remainingClearingCids, marginDepositCid = newMarginDepositCid
              else do
                -- move money from margin account to clearing account
                let amountToTransfer = amount * (-1.0)
                assertMsg ("amount to transfer: " <> show amountToTransfer <> " exceeds amount in margin account: " <> show marginDeposit.asset.quantity)
                  $ amountToTransfer < marginDeposit.asset.quantity
                [diffDepositCid, remainingMarginDepositCid] <- exercise marginDepositCid AssetDeposit_Split
                    with quantities = [amountToTransfer]
                newClearingDepositCid <- exercise clearingDepositCid AssetDeposit_Merge with depositCids = [diffDepositCid]
                create this with clearingDepositCids = [newClearingDepositCid], marginDepositCid = remainingMarginDepositCid

      CCPCustomer_TransferFromClearingAccount : (ContractId DepositTransferRequest, ContractId CCPCustomer)
        with
          amount : Decimal
        do
          clearingDepositCid <- exercise (head clearingDepositCids) AssetDeposit_Merge
              with depositCids = tail clearingDepositCids

          clearingDeposit <- fetch clearingDepositCid
          [transferDepositCid, remainingDepositCid] <- exercise clearingDepositCid AssetDeposit_Split
              with quantities = [amount]

          let receiverAccountId = Id with
                signatories = clearingDeposit.account.id.signatories, label = getAccountLabel ccp custodian, version = 0

          depositTransferReqCid <- create DepositTransferRequest with
              sender = ccpCustomer, senderAccountId = clearingDeposit.account.id, depositCid = transferDepositCid, ..

          (,) depositTransferReqCid <$> create this with clearingDepositCids = [remainingDepositCid]

      CCPCustomer_AddDepositToClearingDeposits : ContractId CCPCustomer
        with
          depositCid : ContractId AssetDeposit
        do
          assertMsg "deposit cid already exists" $ depositCid `notElem` clearingDepositCids
          create this with clearingDepositCids = depositCid :: clearingDepositCids

      -- CCPCustomer_TransferToClearingAccount : (ContractId DepositTransferRequest, ContractId CCPCustomer)
      --   with
      --     assetDepositCid : Decimal
      --   do



template CCPCustodianRelationshipRequest
  with
    operator : Party
    custodian : Party
    ccp : Party
  where
    signatory ccp

    -- TODO: Move to custodian relationship request
    controller custodian can
      CCPCustodianRelationshipRequest_Approve : ContractId CCPCustodianRelationship
        do
          create CCPCustodianRelationship
            with operator, custodian, ccp

template CCPCustodianRelationship
  with
    operator : Party
    custodian : Party
    ccp : Party
  where
    signatory custodian, ccp
    key (custodian, ccp) : (Party, Party)
    maintainer key._1

    controller ccp can
      nonconsuming CCPCustodianRelationship_CreateSettlementRule : ContractId AssetSettlementRule
        with
          account : Account
          observers : Set.Set Party
          ctrls : Set.Set Party
        do
          create AssetSettlementRule
            with account, observers, ctrls
