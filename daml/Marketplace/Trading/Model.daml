module Marketplace.Trading.Model where

import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Types (Id(..), Asset(..))
import Marketplace.Trading.Error qualified as Error

data Side
    = Buy
    | Sell
  deriving (Eq, Show)

data OrderType
    = Market
    | Limit with
        price : Decimal
  deriving (Eq, Show)

data TimeInForce
    = GTC
      -- ^ Good Till Cancelled (Rests on book until cancellation)
    | GTD with
        expiryDate : Int
      -- ^ Good Till Date (At expiryDate, order will be automatically cancelled).
      -- UTC date and time in seconds
    | GAA
      -- ^ Good At Auction (Expires after auction if not filled)
    | IOC
      -- ^ Immediate Or Cancel (Allows for partial fills)
    | FOK
      -- ^ Fill Or Kill (All or nothing)
  deriving (Eq, Show)

data Details = Details with
    id : Id
    symbol : Text
    asset : Asset
    side : Side
    orderType : OrderType
    timeInForce : TimeInForce
  deriving (Eq, Show)

data Status
    = New
    | PendingExecution
    | PartiallyExecuted
    | FullyExecuted
    | Rejected with
        reason : Error.T
    | PendingCancellation
    | CancellationRejected with
        reason : Error.T
    | Cancelled
  deriving (Eq, Show)

data Execution = Execution with
    matchId : Text
    makerOrderId : Text
    takerOrderId : Text
    quantity : Decimal
    price : Decimal
    timestamp : Text -- Should this be an Int so we can order if necessary?
  deriving (Eq, Show)

type T = Order

data TradeDeposit = Cleared { clearinghouse: Party} | Collateral (ContractId AssetDeposit) deriving (Show,Eq)

isClearedOrder : Order -> Bool
isClearedOrder Order{collateral = Cleared _} = True
isClearedOrder _                             = False

template Order
  with
    operator : Party
    provider : Party
    customer : Party
    status : Status
    details : Details
    providerOrderId : Optional Text
    executions : [Execution]
    remainingQuantity : Decimal
    collateral : TradeDeposit -- Optional (ContractId AssetDeposit)
  where
    signatory operator, provider, customer
    observer case collateral of
      (Cleared ch) -> [ch]
      _            -> []

    key (provider, details.id.label) : (Party, Text)
    maintainer key._1

template ClearedTrade
  with
    operator : Party
    provider : Party
    clearinghouse : Party
    makerOrderCid : ContractId Order
    takerOrderCid : ContractId Order
    execution : Execution
  where
    signatory provider
    observer clearinghouse

    controller clearinghouse can
      ClearedTrade_Novate : (ContractId ClearedTradeSide, ContractId ClearedTradeSide)
        with
          buyerAccountId : Id
          sellerAccountId : Id
        do
          timeNovated <- getTime
          makerOrder <- fetch makerOrderCid
          takerOrder <- fetch takerOrderCid
          let Execution{..} = execution

          makerCid <- create ClearedTradeSide with
            exchange = provider
            order = makerOrder
            participant = makerOrder.customer
            timeMatched = timestamp
            ..

          takerCid <- create ClearedTradeSide with
            exchange = provider
            order = takerOrder
            participant = takerOrder.customer
            timeMatched = timestamp
            ..

          return (makerCid, takerCid)

template ClearedTradeSide
  with
    clearinghouse : Party
    exchange : Party
    participant : Party
    order : Order
    quantity : Decimal
    price : Decimal
    timeMatched : Text -- Should this be an Int so we can order if necessary?
    timeNovated : Time -- previously timestamp
  where
    signatory clearinghouse, exchange
    observer exchange, participant

-- template ClearedTradeSide
--   with
--     operator : Party
--     provider : Party
--     clearinghouse : Party
--   where
--     signatory clearinghouse
--
