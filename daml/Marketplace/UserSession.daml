module Marketplace.UserSession where

import qualified Marketplace.Broker as Broker
import Marketplace.Custodian
import Marketplace.Exchange
import qualified Marketplace.Investor as Investor
import Marketplace.Issuer
import Marketplace.Operator
import Marketplace.Utils

import DA.Action

type T = UserSession

template UserSession
  with
    operator : Party
    user : Party
    role : MarketRole
  where
    signatory user

    controller operator can
      Ack : ()
        do
          let userKey = (operator, user)
          case role of
            CustodianRole -> do
              optCustodianInvitation <- lookupByKey @CustodianInvitation userKey
              optCustodian <- lookupByKey @Custodian userKey
              case (optCustodianInvitation, optCustodian) of
                (None, None) -> void $ exerciseByKey @Operator operator Operator_OnboardCustodian with custodian = user
                (Some custodianInvitationCid, Some custodianCid) -> archive custodianInvitationCid
                _ -> return ()
            IssuerRole -> do
              optIssuerInvitation <- lookupByKey @IssuerInvitation userKey
              optIssuer <- lookupByKey @Issuer userKey
              case (optIssuerInvitation, optIssuer) of
                (None, None) -> void $ exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = user
                (Some issuerInvitationCid, Some issuerCid) -> archive issuerInvitationCid
                _ -> return ()
            ExchangeRole -> do
              optExchangeInvitation <- lookupByKey @ExchangeInvitation userKey
              optExchange <- lookupByKey @Exchange userKey
              case (optExchangeInvitation, optExchange) of
                (None, None) -> void $ exerciseByKey @Operator operator Operator_OnboardExchange with exchange = user
                (Some exchangeInvitationCid, Some exchangeCid) -> archive exchangeInvitationCid
                _ -> return ()
            InvestorRole -> do
              optInvestorInvitation <- lookupByKey @Investor.Invitation userKey
              optInvestor <- lookupByKey @Investor.T userKey
              case (optInvestorInvitation, optInvestor) of
                (None, None) -> void $ exerciseByKey @Operator operator Operator_OnboardInvestor with investor = user
                (Some investorInvitationCid, Some investorCid) -> archive investorInvitationCid
                _ -> return ()
            BrokerRole -> do
              optBrokerInvitation <- lookupByKey @Broker.Invitation userKey
              optBroker <- lookupByKey @Broker.T userKey
              case (optBrokerInvitation, optBroker) of
                (None, None) -> void $ exerciseByKey @Operator operator Operator_OnboardBroker with broker = user
                (Some brokerInvitationCid, Some brokerCid) -> archive brokerInvitationCid
                _ -> return ()
