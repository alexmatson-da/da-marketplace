module Marketplace.Matching where

import DA.Next.Set (fromList)

import qualified Marketplace.Trading as Trading

template Service
  with
    operator : Party
    provider : Party
  where
    signatory operator, provider

    key (operator, provider) : (Party, Party)
    maintainer key._1

    controller provider can
      nonconsuming MatchOrders : ContractId Trading.Trade
        with
          matchId : Text
          makerOrderCid : ContractId Trading.Order
          takerOrderCid : ContractId Trading.Order
          filledQuantity : Decimal
          filledPrice : Decimal
        do
          makerOrder <- fetch makerOrderCid
          takerOrder <- fetch takerOrderCid

          let
            (buy, buyCid, sell, sellCid) = if makerOrder.isBid then (makerOrder, makerOrderCid, takerOrder, takerOrderCid) else (takerOrder, takerOrderCid, makerOrder, makerOrderCid)
            tradeInstruction = Trading.TradeInstruction with signed = fromList [operator, provider]; buyer = buy.customer; seller = sell.customer; ..
          tradeInstructionCid <- create tradeInstruction
          tradeInstructionCid <- exercise buyCid Trading.InstructTrade with ..
          tradeInstructionCid <- exercise sellCid Trading.InstructTrade with ..
          exercise tradeInstructionCid Trading.Process with ..

template Offer
  with
    operator : Party
    provider : Party
  where
    signatory operator

    controller provider can
      Accept : ContractId Service
        do
          create Service with ..

      Decline : ()
        do
          return ()

template Request
  with
    provider : Party
    operator : Party
  where
    signatory provider

    controller operator can
      Approve : ContractId Service
        do
          create Service with ..

      Reject : ()
        do
          return ()
