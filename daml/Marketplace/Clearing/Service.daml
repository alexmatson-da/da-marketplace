{-# LANGUAGE MultiWayIf #-}

module Marketplace.Clearing.Service where

import DA.Functor (void)

import DA.Finance.Asset
import DA.Finance.Types

import qualified Marketplace.Rule.AllocationAccount as AllocationAccountRule (T, Deposit(..), Withdraw(..))
import Marketplace.Clearing.Model
import Marketplace.Clearing.Utils

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    ccpAccount : Account
    clearingAccount : Account
    marginAccount : Account
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    let
      transferToMarginAccount : ContractId AssetDeposit -> Update (ContractId AssetDeposit)
      transferToMarginAccount = \depositCid -> exerciseByKey @AllocationAccountRule.T marginAccount.id
          AllocationAccountRule.Deposit with ..

      transferFromMarginAccount : ContractId AssetDeposit -> Update (ContractId AssetDeposit)
      transferFromMarginAccount = \depositCid -> exerciseByKey @AllocationAccountRule.T marginAccount.id
          AllocationAccountRule.Withdraw with transferTo = clearingAccount; ..

      resolveMarginCalculation : ContractId MarginCalculation -> CalculationResults -> Update ()
      resolveMarginCalculation = \calculationCid results -> do
        exerciseByKey @MemberStanding (provider, customer) MemberStanding_UpdateMargin with
            newMarginSatisfied = isSatisfied results; ..
        case results of
          CalculationSatisfied -> void $ exercise calculationCid MarginCalculation_Resolve with note = ""; ..
          CalculationFailed    -> void $ exercise calculationCid MarginCalculation_Reject with note = ""; ..

      resolveMarkToMarketCalculation : ContractId MarkToMarketCalculation -> CalculationResults -> Update ()
      resolveMarkToMarketCalculation = \calculationCid results -> do
        exerciseByKey @MemberStanding (provider, customer) MemberStanding_UpdateMTM with
            newMtmSatisied = isSatisfied results; ..
        case results of
          CalculationSatisfied -> void $ exercise calculationCid MarkToMarketCalculation_Resolve with note = ""; ..
          CalculationFailed    -> void $ exercise calculationCid MarkToMarketCalculation_Reject with note = ""; ..

    controller provider can
      nonconsuming CreateMarginCalculation : ContractId MarginCalculation
        with
          targetAmount : Decimal
          currency : Text
          calculationId : Text
        do
          calculationTime <- getTime
          create MarginCalculation with ccp = provider; accountId = clearingAccount.id; ..

      nonconsuming CreateMarkToMarket : ContractId MarkToMarketCalculation
        with
          mtmAmount : Decimal
          currency : Text
          calculationId : Text
        do
          calculationTime <- getTime
          create MarkToMarketCalculation with ccp = provider; accountId = clearingAccount.id; ..

      nonconsuming PerformMarginFill : Optional ((ContractId AssetDeposit), [ContractId AssetDeposit])
        with
          depositCids : [ContractId AssetDeposit]
          marginDepositCids : [ContractId AssetDeposit]
          calculationCid : ContractId MarginCalculation
        do
          targetAmount  <- (.targetAmount) <$> fetch calculationCid
          depositAmount <- getDepositQuantities depositCids
          marginAmount  <- getDepositQuantities marginDepositCids

          let diff = targetAmount - marginAmount
          if diff > 0.0 && depositAmount < diff
          then resolveMarginCalculation calculationCid CalculationFailed >> return None
          else do
            resolveMarginCalculation calculationCid CalculationSatisfied
            if | diff == 0.0 -> return None
               | diff > 0.0  -> Some <$> exercise self TransferToMargin with amount = diff; ..
               | otherwise   -> Some <$> exercise self TransferFromMargin with amount = (abs diff); ..

      nonconsuming PerformMarkToMarket : Optional (ContractId AssetDeposit, [ContractId AssetDeposit])
        with
          providerDepositCids : [ContractId AssetDeposit]
          customerDepositCids : [ContractId AssetDeposit]
          calculationCid : ContractId MarkToMarketCalculation
        do
          mtmAmount      <- (.mtmAmount) <$> fetch calculationCid
          providerAmount <- getDepositQuantities providerDepositCids
          customerAmount <- getDepositQuantities customerDepositCids

          let failCalc : Update ()
              failCalc = resolveMarkToMarketCalculation calculationCid CalculationFailed

              satisfyCalc : Update ()
              satisfyCalc = resolveMarkToMarketCalculation calculationCid CalculationSatisfied

          if
            | mtmAmount == 0.0 -> satisfyCalc >> return None
            | mtmAmount > 0.0  ->
              if providerAmount < mtmAmount
              then failCalc >> return None
              else satisfyCalc >> Some <$> exercise self TransferFromProvider with amount = mtmAmount; depositCids = providerDepositCids
            | otherwise ->
              if customerAmount < abs mtmAmount
              then failCalc >> return None
              else satisfyCalc >> Some <$> exercise self TransferToProvider with amount = abs mtmAmount; depositCids = customerDepositCids

      nonconsuming TransferFromProvider : (ContractId AssetDeposit, [ContractId AssetDeposit])
        with
          depositCids : [ContractId AssetDeposit]
          amount : Decimal
        do
          assertMsg "deposits are not enough to transfer from provider" =<< (amount <=) <$> getDepositQuantities depositCids
          (depositCid::remainingCids) <- mergeAndSplit depositCids amount
          flip (,) remainingCids <$> transferWithController depositCid clearingAccount

      -- TODO: check that the deposit cid matches the clearing account?
      nonconsuming TransferToProvider : (ContractId AssetDeposit, [ContractId AssetDeposit])
        with
          amount : Decimal
          depositCids : [ContractId AssetDeposit]
        do
          assertMsg "deposits are not enough to transfer to provider" =<< (amount <=) <$> getDepositQuantities depositCids
          (depositCid::remainingCids) <- mergeAndSplit depositCids amount
          flip (,) remainingCids <$> transferWithController depositCid ccpAccount

      nonconsuming TransferFromMargin : (ContractId AssetDeposit,[ContractId AssetDeposit])
        with
          marginDepositCids : [ContractId AssetDeposit]
          amount : Decimal
        do
          assertMsg "deposits are not enough to transfer from margin" =<< (amount <=) <$> getDepositQuantities marginDepositCids
          (depositCid::remainingCids) <- mergeAndSplit marginDepositCids amount
          flip (,) remainingCids <$> transferFromMarginAccount depositCid

      nonconsuming TransferToMargin : (ContractId AssetDeposit,[ContractId AssetDeposit])
        with
          depositCids : [ContractId AssetDeposit]
          amount : Decimal
        do
          assertMsg "deposits are not enough to transfer to margin" =<< (amount <=) <$> getDepositQuantities depositCids
          (depositCid::remainingCids) <- mergeAndSplit depositCids amount
          flip (,) remainingCids <$> transferToMarginAccount depositCid

    choice Terminate : ()
      with
        ctrl : Party
      controller ctrl
      do
        void $ archive . fst <$> fetchByKey @MemberStanding (provider,customer)

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
    ccpAccount : Account
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        with
          clearingAccount : Account
          marginAccount : Account
        do
          create MemberStanding with marginSatisfied = True, mtmSatisfied = True, ..
          create Service with ..

      Decline : ()
        do
          return ()

    controller provider can
      Withdraw : ()
        do pure ()

template Request
  with
    customer : Party
    provider : Party
    clearingAccount : Account
    marginAccount : Account
  where
    signatory customer

    controller customer can
      Cancel : ()
        do pure ()

    controller provider can
      Reject : ()
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
        ccpAccount : Account
      controller operator, provider
      do
        create MemberStanding with marginSatisfied = True, mtmSatisfied = True, ..
        create Service with ..
