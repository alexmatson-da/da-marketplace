module Marketplace.Broker where

import Marketplace.BrokerCustomer
import Marketplace.Custodian
import Marketplace.Registry
import Marketplace.Transfer
import Marketplace.Utils

import DA.Finance.Asset (AssetDeposit, AssetDeposit_Merge(..), AssetDeposit_Split(..))
import DA.Finance.Types (Id(..))

import DA.List

type T = Broker

template Invitation
  with
    operator : Party
    broker : Party
    public : Party
  where
    signatory operator

    key (operator, broker) : (Party, Party)
    maintainer key._1

    controller broker can
      Accept : (ContractId RegisteredBroker, ContractId Broker)
        with
          name : Text
          location : Text
        do
          brokerRegistryCid <- create RegisteredBroker with ..
          brokerCid <- create Broker with ..
          return (brokerRegistryCid, brokerCid)


template Broker
  with
    operator : Party
    broker : Party
  where
    signatory operator, broker

    key (operator, broker) : (Party, Party)
    maintainer key._2

    controller broker can
      nonconsuming RequestCustodianRelationship : ContractId CustodianRelationshipRequest
        with
          custodian : Party
        do create CustodianRelationshipRequest with requester = broker, role = BrokerRole, ..

      nonconsuming InviteCustomer : (ContractId BrokerCustomerInvitation)
        with
          customer : Party
        do create BrokerCustomerInvitation with ..

      nonconsuming RequestDepositTransfer : ContractId DepositTransferRequest
        with
          depositCid : ContractId AssetDeposit
          receiverAccountId : Id
        do
           deposit <- fetch depositCid
           assert $ deposit.account.owner == broker
           create DepositTransferRequest with sender = broker, senderAccountId = deposit.account.id, ..

      nonconsuming AllocateToProvider : ContractId DepositTransferRequest
        with
          depositCids : [ContractId AssetDeposit]
          amount : Decimal
          provider : Party
        do
          aggregateQty <- getDepositQuantities depositCids

          assertMsg ("amount should be less than or equal to total deposit amount") $ amount <= aggregateQty

          mergedCid <- exercise (head depositCids) AssetDeposit_Merge with depositCids = tail depositCids
          depositCid <- head <$> exercise mergedCid AssetDeposit_Split with quantities = [ amount ]

          deposit <- fetch depositCid
          let receiverAccountId = Id
                with
                  signatories = deposit.account.id.signatories,
                    label = getAccountLabel broker provider,
                    version = 0
          exercise self RequestDepositTransfer with ..
