module Marketplace.Brokerage.Service where

import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Types (Id, Asset, Account)
import Marketplace.Trading.Service qualified as TradingService
import Marketplace.Trading.Order qualified as Order

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    tradingAccount : Account
    allocationAccount : Account
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    controller customer can
      nonconsuming RequestCreateOrder : ContractId CreateOrderRequest
        with
          orderId : Id
          symbol : Text
          asset : Asset
          side : Order.Side
          orderType : Order.OrderType
          timeInForce : Order.TimeInForce
          depositCid : ContractId AssetDeposit
        do
          -- TODO: Check that price and quantity conform to the precision requirements of the Listing
          create CreateOrderRequest with ..

      nonconsuming RequestCancelOrder : ContractId CancelOrderRequest
        with
          orderCid : ContractId Order.T
        do
          create CancelOrderRequest with ..

    controller provider can
      nonconsuming CreateOrder : (ContractId Order.T, ContractId TradingService.CreateOrderRequest, ContractId AssetDeposit)
        with
          createOrderRequestCid : ContractId CreateOrderRequest
          tradingProvider : Party
        do
          CreateOrderRequest{..} <- fetch createOrderRequestCid
          exerciseByKey @TradingService.T (operator, tradingProvider, provider) TradingService.RequestCreateOrder with details = Order.Details with id = orderId; ..; ..

      nonconsuming CancelOrder : (ContractId Order.T, ContractId TradingService.CancelOrderRequest)
        with
          cancelOrderRequestCid : ContractId CancelOrderRequest
          tradingProvider : Party
        do
          CancelOrderRequest{..} <- fetch cancelOrderRequestCid
          exerciseByKey @TradingService.T (operator, tradingProvider, customer) TradingService.RequestCancelOrder with ..

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        with
          tradingAccount : Account
          allocationAccount : Account
        do
          create Service with ..

      Decline : ()
        do
          return ()

template Request
  with
    operator : Party
    customer : Party
    provider : Party
    tradingAccount : Account
    allocationAccount : Account
  where
    signatory operator, customer

    controller provider can
      Approve : ContractId Service
        do
          create Service with ..

      Reject : ()
        do
          return ()

template CreateOrderRequest
  with
    operator : Party
    provider : Party
    customer : Party
    orderId : Id
    symbol : Text
    asset : Asset
    side : Order.Side
    orderType : Order.OrderType
    timeInForce : Order.TimeInForce
    depositCid : ContractId AssetDeposit
  where
    signatory operator, provider, customer

template CancelOrderRequest
  with
    operator : Party
    provider : Party
    customer : Party
    orderCid : ContractId Order.T
  where
    signatory operator, provider, customer
