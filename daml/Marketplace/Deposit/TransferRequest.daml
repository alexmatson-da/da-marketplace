module Marketplace.Deposit.TransferRequest where

import Marketplace.Utils (getAccountOwnerProvider)
import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Asset.Settlement (
    AssetSettlementRule(..)
  , AssetSettlement_Transfer(..))
import DA.Finance.Types (Id,Account(..))
import DA.List hiding (delete)
import DA.Next.Set

type T = TransferRequest

template TransferRequest
  with
    sender : Party
    senderAccountId : Id
    receiverAccountId : Id
    depositCid : ContractId AssetDeposit
  where
    let senderSig = head $ toList senderAccountId.signatories
        receiverSig = head $ toList receiverAccountId.signatories
        custodian = senderSig
    ensure senderSig == receiverSig && senderAccountId /= receiverAccountId
    signatory sender

    controller custodian can
      Approve : ContractId AssetDeposit
        do
          deposit <- fetch depositCid
          let (sender, senderProvider) = getAccountOwnerProvider senderAccountId.label
              (receiver, receiverProvider) = getAccountOwnerProvider receiverAccountId.label

              senderAccount = Account
                with id = senderAccountId, provider = senderProvider, owner = sender
              receiverAccount = Account
                with id = receiverAccountId, provider = receiverProvider, owner = receiver
              depositObservers = delete sender $ delete senderProvider $ deposit.observers

          senderRuleCid <- create AssetSettlementRule
            with account = senderAccount,
                  observers = fromList [senderProvider],
                  ctrls = empty
          receiverRuleCid <- create AssetSettlementRule
            with account = receiverAccount,
                  observers = fromList [receiverProvider, receiver],
                  ctrls = fromList [sender]

          newDepositCid <- exercise senderRuleCid AssetSettlement_Transfer
            with receiverAccountId = receiverAccountId, ..

          newDeposit <- fetch newDepositCid
          let newObservers = depositObservers <> newDeposit.observers
          newDepositCid' <- create newDeposit with observers = newObservers
          archive newDepositCid

          archive senderRuleCid
          archive receiverRuleCid

          return newDepositCid'

      Reject : ()
        do return ()

