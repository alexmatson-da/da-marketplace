module Marketplace.Deposit.DebitRequest where

import Marketplace.Utils (getAccountOwnerProvider)
import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Asset.Settlement (
    AssetSettlementRule(..)
  , AssetSettlement_Debit(..))
import DA.Finance.Types (Asset, Account)
import DA.List hiding (delete)
import DA.Next.Set

type T = DebitRequest

template DebitRequest
  with
    owner : Party
    ownerAccount : Account
    depositCid : ContractId AssetDeposit
  where
    let senderSig = head $ toList ownerAccount.id.signatories
        custodian = senderSig
    signatory owner

    controller custodian can
      Approve : Asset
        do
          let (owner, provider) = getAccountOwnerProvider ownerAccount.id.label

          depositRuleCid <- create AssetSettlementRule
            with account = ownerAccount
                 observers = fromList [provider]
                 ctrls = empty

          newAsset <- exercise depositRuleCid AssetSettlement_Debit
            with depositCid

          archive depositRuleCid
          return newAsset

      Reject : ()
        do return ()
