module Marketplace.CentralCounterparty where

import Marketplace.CentralCounterpartyCustomer
import Marketplace.Custodian
import Marketplace.Registry
import Marketplace.Trading
import Marketplace.Utils


template CCPInvitation
  with
    operator : Party
    ccp : Party
    public : Party
  where
    signatory operator

    key (operator, ccp) : (Party, Party)
    maintainer key._1

    controller ccp can
      CCPInvitation_Accept : (ContractId RegisteredCCP, ContractId CCP)
        with
          name : Text
          location : Text
          custodian : Party
        do
          ccpRegistryCid <- create RegisteredCCP with ..
          ccpCid <- create CCP with ..
          return (ccpRegistryCid, ccpCid)


template CCP
  with
    operator : Party
    custodian : Party
    ccp : Party
  where
    signatory operator, ccp

    key (operator, ccp) : (Party, Party)
    maintainer key._2

    controller ccp can
      nonconsuming CCP_RequestCustodianRelationship : (ContractId CustodianRelationshipRequest, ContractId CCPCustodianRelationshipRequest)
        do
          cusRequestCid <- create CustodianRelationshipRequest with requester = ccp, role = CCPRole, ..
          ccpRequestCid <- create CCPCustodianRelationshipRequest with ..
          return (cusRequestCid, ccpRequestCid)

      nonconsuming CCP_InviteCustomer : (ContractId CCPCustomerInvitation)
        with
          ccpCustomer : Party
        do create CCPCustomerInvitation with ..

      nonconsuming CCP_NovateDerivativeTrade : (ContractId DerivativeTradeSide, ContractId DerivativeTradeSide)
        with
          derivativeTradeCid : ContractId DerivativeTrade
        do
          derivativeTrade <- fetch derivativeTradeCid
          -- verify that both buyer and seller are ccp customers
          fetchByKey @CCPCustomer (ccp, operator, derivativeTrade.buyer)
          fetchByKey @CCPCustomer (ccp, operator, derivativeTrade.seller)

          let buyerAccountId = getAccountId derivativeTrade.buyer ccp [custodian]
              sellerAccountId = getAccountId derivativeTrade.seller ccp [custodian]
          exercise derivativeTradeCid DerivativeTrade_Novate with ..

