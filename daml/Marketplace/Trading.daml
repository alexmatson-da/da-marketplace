module Marketplace.Trading where

-- import Marketplace.BinaryOption
-- import Marketplace.Token
-- import Marketplace.Transfer
import Marketplace.Utils

import DA.Finance.Asset
import DA.Finance.Types

template CreateOrderRequest
  with
    exchange : Party
    member : Party
    market : Text
    asset : Asset
    price : Asset
    isBid : Bool
    depositCid : ContractId AssetDeposit
  where
    signatory exchange, member

template CancelOrderRequest
  with
    exchange : Party
    member : Party
    orderCid : ContractId Order
  where
    signatory exchange, member
      
template Order
  with
    exchange : Party
    member : Party
    market : Text
    asset : Asset
    price : Asset
    isBid : Bool
    depositCid : ContractId AssetDeposit
  where
    signatory exchange, member

-- import DA.Math

-- TODO: Revisit/reimplement

-- template BrokerOrderRequest
--   with
--     brokerCustomer : Party
--     broker : Party
--     depositCid : ContractId AssetDeposit
--     pair : IdPair
--     isBid : Bool
--     price : Decimal
--     qty : Decimal
--   where
--     signatory broker, brokerCustomer

--     controller broker can
--       BrokerOrderRequest_Accept : (ContractId BrokerOrder, ContractId DepositTransferRequest)
--         with
--           brokerOrderId : Int
--         do
--           deposit <- fetch depositCid
--           assert $ deposit.account.owner == brokerCustomer
--           brokerOrderCid <- create BrokerOrder with ..
--           let receiverAccountId = Id with signatories = deposit.account.id.signatories, label = getAccountLabel broker broker, version = 0
--           depositTransferReqCid <- create DepositTransferRequest with sender = brokerCustomer, senderAccountId = deposit.account.id, ..
--           return (brokerOrderCid, depositTransferReqCid)


-- template BrokerOrder
--   with
--     brokerCustomer : Party
--     broker : Party
--     pair : IdPair
--     isBid : Bool
--     price : Decimal
--     qty : Decimal
--     brokerOrderId : Int
--   where
--     signatory broker, brokerCustomer

--     key (broker, brokerOrderId) : (Party, Int)
--     maintainer key._1

--     controller broker can
--       BrokerOrder_Fill : ContractId DepositTransferRequest
--         with
--           depositCid : ContractId AssetDeposit
--         do
--           deposit <- fetch depositCid
--           assertMsg ("the owner of the deposit is not broker: " <> show broker)
--             $ deposit.account.owner == broker
--           (_, baseToken) <- fetchByKey @Token pair._1
--           (_, quoteToken) <- fetchByKey @Token pair._2
--           let depositToken = if isBid then baseToken else quoteToken
--           assertMsg ("deposit should be for " <> depositToken.id.label
--             <> " but it is for " <> deposit.asset.id.label)
--             $ deposit.asset.id == depositToken.id
--           let depositQty = if isBid then deposit.asset.quantity
--                            else roundBankers baseToken.quantityPrecision $ deposit.asset.quantity / price
--           assertMsg ("the deposit quantity of " <> show depositQty
--             <> " does not match the requested of " <> show qty) $ depositQty == qty
--           let senderAccountId = deposit.account.id
--               receiverAccountId = Id with signatories = deposit.account.id.signatories, label = getAccountLabel brokerCustomer broker, version = 0
--           create BrokerTrade with isBuy = isBid, ..
--           create DepositTransferRequest with sender = broker, ..


template TradeSide
  with
    exchParticipant : Party
    exchange : Party
    pair : IdPair
    price : Decimal
    qty : Decimal
    isBuy : Bool
    orderId : Int
    counterOrderId : Int
    timestamp : Text
    optAsset : Optional Asset
    receiverAccountId : Id
    isBinaryOption : Bool
  where
    signatory exchange, exchParticipant
    -- TODO: Revisit/reimplement
    -- controller exchange can
    --   TradeSide_Settle : (ContractId SettledTradeSide, Optional (ContractId DepositCreditRequest))
    --     do
    --       assert $ not isBinaryOption
    --       optDepositTxReqCid <- case optAsset of
    --         Some asset -> do
    --           let (receiver, receiverProvider) = getAccountOwnerProvider receiverAccountId.label
    --               receiverAccount = Account with id = receiverAccountId, provider = receiverProvider, owner = receiver
    --           creditRequestCid <- create DepositCreditRequest
    --               with owner = exchange
    --                    account = receiverAccount
    --                    asset = asset
    --           return $ Some creditRequestCid
    --         None -> return None
    --       settledTradeCid <- create SettledTradeSide with ..
    --       return (settledTradeCid, optDepositTxReqCid)

    --   TradeSide_SettleBinaryOption : (ContractId SettledTradeSide, Optional (ContractId DepositCreditRequest))
    --     with
    --       settledBinOptionCid : ContractId SettledBinaryOption
    --     do
    --       assert isBinaryOption
    --       settledBinOption <- fetch settledBinOptionCid
    --       let needsTransfer = settledBinOption.outcome /= isBuy
    --       optCreditRequestCid <- case (optAsset, needsTransfer) of
    --         (Some asset, True) -> do
    --           let (receiver, receiverProvider) = getAccountOwnerProvider receiverAccountId.label
    --               receiverAccount = Account with id = receiverAccountId, provider = receiverProvider, owner = receiver
    --           creditRequestCid <- create DepositCreditRequest
    --               with owner = exchange
    --                    account = receiverAccount
    --                    asset = asset
    --           return $ Some creditRequestCid
    --         _ -> return None
    --       settledTradeCid <- create SettledTradeSide with ..
    --       return (settledTradeCid, optCreditRequestCid)


template SettledTradeSide
  with
    exchParticipant : Party
    exchange : Party
    pair : IdPair
    price : Decimal
    qty : Decimal
    isBuy : Bool
    orderId : Int
    counterOrderId : Int
    timestamp : Text
  where
    signatory exchange, exchParticipant


template BrokerTrade
  with
    brokerCustomer : Party
    broker : Party
    pair : IdPair
    price : Decimal
    qty : Decimal
    isBuy : Bool
    brokerOrderId : Int
  where
    signatory broker, brokerCustomer
