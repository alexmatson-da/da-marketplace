-- TODO DRY: refactor opportunity: embed Order/Trading in these files. 
-- Use proper namespace
module Marketplace.Trading where

import Marketplace.Token
import qualified Marketplace.Deposit.TransferRequest as Deposit.TransferRequest
import Marketplace.Deposit.TransferRequest (TransferRequest(..))
import Marketplace.Utils

import DA.Finance.Asset
import DA.Finance.Types

template BrokerOrderRequest
  with
    customer : Party
    broker : Party
    depositCid : ContractId AssetDeposit
    pair : IdPair
    isBid : Bool
    price : Decimal
    qty : Decimal
  where
    signatory broker, customer

    controller broker can
      BrokerOrderRequest_Accept : (ContractId BrokerOrder, ContractId Deposit.TransferRequest.T)
        with
          brokerOrderId : Int
        do
          deposit <- fetch depositCid
          assert $ deposit.account.owner == customer
          brokerOrderCid <- create BrokerOrder with ..
          let receiverAccountId = Id with signatories = deposit.account.id.signatories, label = getAccountLabel broker broker, version = 0
          depositTransferReqCid <- create TransferRequest with sender = customer, senderAccountId = deposit.account.id, ..
          return (brokerOrderCid, depositTransferReqCid)


template BrokerOrder
  with
    customer : Party
    broker : Party
    pair : IdPair
    isBid : Bool
    price : Decimal
    qty : Decimal
    brokerOrderId : Int
  where
    signatory broker, customer

    key (broker, brokerOrderId) : (Party, Int)
    maintainer key._1

    controller broker can
      BrokerOrder_Fill : ContractId Deposit.TransferRequest.T
        with
          depositCid : ContractId AssetDeposit
        do
          deposit <- fetch depositCid
          assertMsg ("the owner of the deposit is not broker: " <> show broker)
            $ deposit.account.owner == broker
          (_, baseToken) <- fetchByKey @Token pair._1
          (_, quoteToken) <- fetchByKey @Token pair._2
          let depositToken = if isBid then baseToken else quoteToken
          assertMsg ("deposit should be for " <> depositToken.id.label
            <> " but it is for " <> deposit.asset.id.label)
            $ deposit.asset.id == depositToken.id
          let depositQty = if isBid then deposit.asset.quantity
                           else roundBankers baseToken.quantityPrecision $ deposit.asset.quantity / price
          assertMsg ("the deposit quantity of " <> show depositQty
            <> " does not match the requested of " <> show qty) $ depositQty == qty
          let senderAccountId = deposit.account.id
              receiverAccountId = Id with signatories = deposit.account.id.signatories, label = getAccountLabel customer broker, version = 0
          create BrokerTrade with isBuy = isBid, ..
          create TransferRequest with sender = broker, ..

template BrokerTrade
  with
    customer : Party
    broker : Party
    pair : IdPair
    price : Decimal
    qty : Decimal
    isBuy : Bool
    brokerOrderId : Int
  where
    signatory broker, customer
