module Marketplace.Issuer where

-- TODO: Revisit/reimplement

-- import Marketplace.BinaryOption
-- import Marketplace.Custodian
-- import Marketplace.Registry
-- import Marketplace.Token
-- import Marketplace.Utils

-- import DA.Finance.Types

-- import DA.Next.Set

-- template IssuerInvitation
--   with
--     operator : Party
--     issuer : Party
--     public : Party
--   where
--     signatory operator

--     key (operator, issuer) : (Party, Party)
--     maintainer key._1

--     controller issuer can
--       IssuerInvitation_Accept : ContractId Issuer
--         with
--           name : Text
--           location : Text
--           title : Text
--           issuerID : Text
--         do
--           create RegisteredIssuer with ..
--           create Issuer with ..


-- template Issuer
--   with
--     operator : Party
--     issuer : Party
--     public : Party
--   where
--     signatory operator, issuer

--     key (operator, issuer) : (Party, Party)
--     maintainer key._1

--     controller issuer can
--       nonconsuming Issuer_IssueToken : ContractId Token
--         with
--           name : Text
--           quantityPrecision : Int
--           description : Text
--           isPublic : Bool
--           observers : [Party]
--         do
--           let tokenId = Id with signatories = fromList [issuer], label = name, version = 0
--           let tokenObservers = if isPublic then (public :: operator :: observers) else observers
--           create Token with id = tokenId, observers = fromList tokenObservers, ..

--       nonconsuming Issuer_IssueBinaryOption : ContractId BinaryOption
--         with
--           name : Text
--           description : Text
--           minPrice : Decimal
--           maxPrice : Decimal
--           isPublic : Bool
--           observers : [Party]
--         do
--           let binOptionId = Id with signatories = fromList [issuer], label = name, version = 0
--           let binOptionObservers = if isPublic then (public :: observers) else observers
--           create BinaryOption with id = binOptionId, observers = fromList binOptionObservers, ..

--       nonconsuming Issuer_RequestCustodianRelationship : ContractId CustodianRelationshipRequest
--         with
--           custodian : Party
--         do create CustodianRelationshipRequest with requester = issuer, role = IssuerRole, ..
