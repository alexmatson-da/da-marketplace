module Marketplace.Investor where

import Marketplace.Exchange
import Marketplace.Custodian
import qualified Marketplace.Registry.Investor as Registry (Investor(..))
import Marketplace.Token
import Marketplace.Utils
import qualified Marketplace.Deposit.TransferRequest as Deposit.TransferRequest
import Marketplace.Deposit.TransferRequest (TransferRequest(..))
import qualified Marketplace.Deposit.CreditRequest as Deposit.CreditRequest
import Marketplace.Deposit.CreditRequest (CreditRequest(..))
import qualified Marketplace.Deposit.DebitRequest as Deposit.DebitRequest
import Marketplace.Deposit.DebitRequest (DebitRequest(..))

import DA.Finance.Asset ( 
    AssetDeposit(..)
  , AssetDeposit_Split(..)
  , AssetDeposit_Merge(..))
import DA.Finance.Types (Id(..), Account(..), Asset(..))

import DA.List

type T = Investor

template Invitation
  with
    operator : Party
    investor : Party
    public : Party
  where
    signatory operator

    key (operator, investor) : (Party, Party)
    maintainer key._1

    controller investor can
      Accept : ContractId Investor
        with
          isPublic : Bool
          name : Text
          location : Text
        do
          create Registry.Investor with ..
          create Investor with ..


template Investor
  with
   operator : Party
   investor : Party
   isPublic : Bool
   public : Party
  where
    signatory operator, investor

    key (operator, investor) : (Party, Party)
    maintainer key._1

    controller investor can
      nonconsuming RequestCustodianRelationship : ContractId CustodianRelationshipRequest
        with
          custodian : Party
        do create CustodianRelationshipRequest with requester = investor, role = InvestorRole, ..

      nonconsuming RequestExchangeParticipantInvitation : ContractId ExchangeParticipantInvitationRequest
        with
          exchange : Party
        do
          create ExchangeParticipantInvitationRequest with operator, exchange, participant = investor

      nonconsuming RequestDepositTransfer : ContractId Deposit.TransferRequest.T
        with
          depositCid : ContractId AssetDeposit
          receiverAccountId : Id
        do
           deposit <- fetch depositCid
           assert $ deposit.account.owner == investor
           create TransferRequest with sender = investor, senderAccountId = deposit.account.id, ..

      nonconsuming RequestDeposit : ContractId Deposit.CreditRequest.T
        with
          tokenId : Id
          depositQuantity : Decimal
          custodian : Party
        do
          (tokenCid, token) <- fetchByKey @Token tokenId
          let accountId = getAccountId investor custodian [custodian]
              quantity = roundBankers token.quantityPrecision depositQuantity
              account = Account with id = accountId, provider = custodian, owner = investor
              asset = Asset with id = tokenId, ..

          create CreditRequest with owner = investor, ..

      nonconsuming RequestWithdrawl : ContractId Deposit.DebitRequest.T
        with
          depositCids : [ContractId AssetDeposit]
          withdrawalQuantity : Decimal
        do
          aggregateQty <- getDepositQuantities depositCids

          assertMsg ("amount should be less than or equal to total deposit amount") $
            withdrawalQuantity <= aggregateQty

          mergedCid <- exercise (head depositCids) AssetDeposit_Merge
            with depositCids = tail depositCids

          depositCid <- head <$> exercise mergedCid AssetDeposit_Split
            with quantities = [ withdrawalQuantity ]

          deposit <- fetch depositCid
          create DebitRequest with
              owner = investor, ownerAccount = deposit.account, ..

      nonconsuming AllocateToProvider : ContractId Deposit.TransferRequest.T
        with
          depositCids : [ContractId AssetDeposit]
          amount : Decimal
          provider : Party
        do
          aggregateQty <- getDepositQuantities depositCids

          assertMsg ("amount should be less than or equal to total deposit amount") $ amount <= aggregateQty

          mergedCid <- exercise (head depositCids) AssetDeposit_Merge with depositCids = tail depositCids
          depositCid <- head <$> exercise mergedCid AssetDeposit_Split with quantities = [ amount ]

          deposit <- fetch depositCid
          let receiverAccountId = Id
                with
                  signatories = deposit.account.id.signatories,
                    label = getAccountLabel investor provider,
                    version = 0
          exercise self RequestDepositTransfer with ..
