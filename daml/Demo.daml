module Demo where

import Common
import ContingentClaims.Claim qualified as C
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation qualified as O
import ContingentClaims.FinancialClaim (cpb, couponDates)
import ContingentClaims.FinancialClaim qualified as C
import Daml.Script
import DA.Date (date, Month(..))
import DA.Finance.Types (Id(..))
import DA.Next.Set (fromList)
import Marketplace.Distribution.Distributor qualified as Distributor
import Marketplace.Distribution.Auction.Service qualified as Auction
import Marketplace.Issuance qualified as Issuance

demo : Script ()
demo = do

  providers@Providers{..} <- onboardProviders
  assets@Assets{..} <- onboardAssets providers

  issuer      <- onboardCustomer providers "Issuer"
  alice       <- onboardCustomer providers "Alice"
  bob         <- onboardCustomer providers "Bob"
  charlie     <- onboardCustomer providers "Charlie"
  dave        <- onboardCustomer providers "Dave"
  aliceUsd    <- depositAsset providers alice     (usd with quantity = 10000.0) alice.mainAccount.id
  bobUsd      <- depositAsset providers bob       (usd with quantity = 5000.0) bob.mainAccount.id
  charlieUsd  <- depositAsset providers charlie   (usd with quantity = 2000.0) charlie.mainAccount.id
  daveUsd     <- depositAsset providers dave      (usd with quantity = 1000.0) dave.mainAccount.id

  auctionOfferCid <- bank `submit` exerciseCmd distributorRoleCid Distributor.OfferAuctionService with customer = issuer.customer; ..
  auctionServiceCid <- issuer.customer `submit` exerciseCmd auctionOfferCid Auction.Accept with allocationAccount = issuer.auctionAccount; receivableAccount = issuer.mainAccount

  issuance providers assets alice

  pure ()

issuance : Providers -> Assets -> Customer -> Script ()
issuance Providers{..} Assets{..} alice = do

  -- Alice originates the option
  origReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid Issuance.RequestBinaryCallOptionOrigination with
      assetLabel = "TSLA Mar21 910.0"
      safekeepingAccountId = alice.mainAccount.id
      observers = []
      expiry = date 2020 Mar 18
      underlyingId = tsla.id
      currencyId = usd.id
      strike = 910.0
  optionDescCid :: _ <- submit bank $ exerciseCmd alice.issuanceServiceCid $ Issuance.Originate origReqCid
  Some optionDesc <- queryContractId bank optionDescCid

  -- Alice issues the option
  createReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid
    Issuance.RequestCreateIssuance with
      issuanceId = "Myissuance"
      accountId = Id (fromList [bank, alice.customer]) alice.mainAccount.id.label 0
      assetId = optionDesc.assetId
      quantity = 1000.0
  (_issuanceCid, optionDepositCid) <- submit bank $ exerciseCmd alice.issuanceServiceCid $ Issuance.CreateIssuance createReqCid

  -- Alice originates a bond
  origReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid Issuance.RequestOrigination with
      assetLabel = "NFLX 4 7/8 04/15/23"
      description = "NFLX 4 7/8 04/15/23"
      safekeepingAccountId = alice.mainAccount.id
      observers = []
      claims =  C.serialize $ cpb 1000.0 (4.0 + 7.0/8.0) usd.id (couponDates 2021 2023 [Jan,Jul] 15)
  cpbDescCid :: _ <- submit bank $ exerciseCmd alice.issuanceServiceCid $ Issuance.Originate origReqCid
  Some cpbDesc <- queryContractId bank cpbDescCid

  -- pedagogical example from https://ledgy.com/blog/examples-of-convertible-notes/
  let convertibleNote : Id -> Decimal -> Id -> Decimal -> Date -> Decimal -> Decimal -> Id -> C.Claim O.Observation Date Id
      convertibleNote note principal ccy discount maturity interest cap underlying =
        C.when (C.at maturity) (
          C.cond (O.observe underlying.label O.<= O.pure cap) (
             C.scale (O.pure (principal * (1.0 + interest)) O./ (O.observe underlying.label O.* O.pure (1.0 - discount))) (C.one underlying)
          )( C.scale (O.pure (principal * (1.0 + interest))) (C.one ccy)
          )
        )

  -- Alice originates a convertible note
  origReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid Issuance.RequestOrigination with
      assetLabel = "NFLX-CONV-NOTE-2021-06-21"
      description = "Netflix Convertible Note 2021-06-21"
      safekeepingAccountId = alice.mainAccount.id
      observers = []
      claims = C.serialize $ convertibleNote nflx.id 100_000.0 usd.id 0.20 (date 2021 Jun 06) 0.04 550.0 nflx.id
  -- FIXME: the below appears to be failing for some inexplicable reason; accept the request in the UI manually!
  _ <- submit bank $ exerciseCmd alice.issuanceServiceCid $ Issuance.Originate origReqCid
  -- Some cnDesc <- queryContractId custodian cnDescCid

  pure ()

-- trading : Script ()
-- trading = do
--   providers@Providers{..} <- onboardCommon

--   -- Assets
--   let
--     shareId = Id with signatories = fromList [ custodian ]; label = "JPM.N"; version = 0
--     cashId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
--     shareAsset = Asset with id = shareId; quantity = 2_000.0
--     cashAsset = Asset with id = cashId; quantity = 140_000.0
--     priceAsset = Asset with id = cashId; quantity = 100.0

--   submit custodian do createCmd AssetCategorization with id = shareId; assetType = "Stock"; assetClass = "Equity"; observers = fromList [public]
--   submit custodian do createCmd AssetCategorization with id = cashId; assetType = "Currency"; assetClass = "FX"; observers = fromList [public]

--   alice <- onboardCustomer cr "Alice" shareAsset exchange

--   creditAccountRequestCid <- submit alice.customer do exerciseCmd alice.custodyServiceCid Custody.RequestCreditAccount with accountId = alice.tradingAccountId; asset = cashAsset
--   cashDepositCid <- submit custodian do exerciseCmd alice.custodyServiceCid Custody.CreditAccount with ..

--   -- List a Security to trade
--   (listingServiceCid, _) <- head <$> query @Listing.Service alice.customer
--   let
--     listingId = "JPMUSD"
--     providerId = "JPMUSD"
--     calendarId = "1"
--     description = "JPMorgan Chase & Co."
--     tradedAssetId = Id with signatories = fromList [ custodian ]; label = "JPM.N"; version = 0
--     quotedAssetId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
--     tradedAssetPrecision = 2
--     quotedAssetPrecision = 2
--     minimumTradableQuantity = 1.0
--     maximumTradableQuantity = 1_000_000.0
--     observers = [public]
--   createListingRequestCid <- submit alice.customer do exerciseCmd listingServiceCid Listing.RequestCreateListing with ..
--   listingCid <- submit exchange do exerciseCmd listingServiceCid Listing.CreateListing with ..

--   let
--     symbol = listingId
--     limit price = Order.Limit with ..
--     submitOrder party label side asset orderType depositCid = do
--       let
--         signatories = fromList [ party ]
--         version = 0
--         id = Id with ..
--         timeInForce = Order.GTC
--         details = Order.Details with ..
--       submit party do exerciseByKeyCmd @TradingService.T (operator, exchange, party) TradingService.RequestCreateOrder with ..

--   aliceShareDepositCids    <- submit alice.customer    do exerciseCmd alice.assetDepositCid AssetDeposit_Split with quantities = [ 400.0, 400.0, 400.0, 400.0 ]
--   aliceCashDepositCids    <- submit alice.customer    do exerciseCmd cashDepositCid AssetDeposit_Split with quantities = [ 20_000.0, 24_000.0, 28_000.0, 32_000.0 ]

--   let
--     aliceBuyOrderIds   = [ "b1", "b2", "b3", "b4" ]
--     aliceSellOrderIds   = [ "s1", "s2", "s3", "s4" ]
--     aliceBuyPrices     = [ limit 50.0, limit 60.0, limit 70.0, limit 80.0 ]
--     aliceSellPrices   = [ limit 110.0, limit 120.0, limit 130.0, limit 140.0 ]
--     aliceBuyTriples    = zip3 aliceCashDepositCids aliceBuyPrices aliceBuyOrderIds
--     aliceSellTriples    = zip3 aliceShareDepositCids aliceSellPrices aliceSellOrderIds
--   forA_ aliceBuyTriples    (\(depositCid, orderType, orderId) -> submitOrder alice.customer orderId Order.Buy (shareAsset with quantity = 400.0) orderType depositCid)
--   forA_ aliceSellTriples    (\(depositCid, orderType, orderId) -> submitOrder alice.customer orderId Order.Sell (shareAsset with quantity = 400.0) orderType depositCid)
