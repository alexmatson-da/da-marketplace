module Tests.Clearing where

import Daml.Script
import DA.Finance.Asset
import DA.Finance.Types
import Marketplace.Clearing.Service qualified as Clearing
import Marketplace.Clearing.Model

import Common
import DA.Functor (void)

testClearingTransfers : Script ()
testClearingTransfers = do
  time <- getTime
  providers@Providers{ccp} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  -- Assets
  let
    cashAsset = usd with quantity = 20000.0

  alice <- onboardCustomer providers "Alice"
  bob   <- onboardCustomer providers "Bob"

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  bobDepositCid   <- depositAsset providers bob cashAsset bob.clearingAccount.id

  (_,csdCid1) <- submit ccp do exerciseCmd alice.clearingServiceCid Clearing.TransferToMargin with depositCid = aliceDepositCid
  (_,csdCid2) <- submit ccp do exerciseCmd csdCid1 Clearing.TransferFromMargin with amount = 1000.0
  (Some ccpAssetDepositCid,csdCid3) <- submit ccp do exerciseCmd csdCid2 Clearing.TransferToProvider with amount = 2000.0; optMTMCalculationCid = None
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 17000.0
  assert =<< depositsQuantityEquals alice.customer alice.clearingAccount 1000.0

  _ <- submit ccp do exerciseCmd bob.clearingServiceCid Clearing.TransferFromProvider with depositCids = [ccpAssetDepositCid]; amount = 2000.0

  return ()


testMarginCalls : Script ()
testMarginCalls = do
  time <- getTime
  providers@Providers{ccp; operator} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  -- Assets
  let cashAsset = usd with quantity = 20000.0

  alice <- onboardCustomer providers "Alice"
  bob   <- onboardCustomer providers "Bob"

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  calculationCid <- submit ccp $ createCmd MarginCalculation with
    customer = alice.customer; currency = "USD"; targetAmount = 4000.0
    calculationTime = time; calculationId = "123456"; accountId = alice.marginAccount.id; ..
  void $ submit ccp do exerciseCmd alice.clearingServiceCid Clearing.PerformMarginFill with depositCids = [aliceDepositCid]; ..
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 4000.0

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  calculationCid <- submit ccp $ createCmd MarginCalculation with
    customer = alice.customer; currency = "USD"; targetAmount = 1000.0
    calculationTime = time; calculationId = "456789"; accountId = alice.marginAccount.id; ..

  void $ submit ccp do exerciseByKeyCmd @Clearing.Service (operator, ccp, alice.customer) Clearing.PerformMarginFill with depositCids = [aliceDepositCid]; ..
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 1000.0

  -- Fail margin calculation
  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  calculationCid <- submit ccp $ createCmd MarginCalculation with
    customer = alice.customer; currency = "USD"; targetAmount = 50000.0
    calculationTime = time; calculationId = "34567"; accountId = alice.marginAccount.id; ..

  void $ submit ccp do exerciseByKeyCmd @Clearing.Service (operator, ccp, alice.customer) Clearing.PerformMarginFill with depositCids = [aliceDepositCid]; ..
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 1000.0
  (Some (_,aliceStanding)) <- queryContractKey @MemberStanding ccp (ccp, alice.customer)
  assert $ not aliceStanding.marginSatisfied

  return ()


testMarkToMarket : Script ()
testMarkToMarket = do
  time <- getTime
  providers@Providers{ccp} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  -- Assets
  let cashAsset = usd with quantity = 20000.0

  alice <- onboardCustomer providers "Alice"
  bob   <- onboardCustomer providers "Bob"

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  bobDepositCid   <- depositAsset providers bob cashAsset bob.clearingAccount.id

  (_,csdCid1) <- submit ccp do exerciseCmd alice.clearingServiceCid Clearing.TransferToMargin with depositCid = aliceDepositCid
  (Some ccpAssetDepositCid,csdCid2) <- submit ccp do exerciseCmd csdCid1 Clearing.TransferToProvider with amount = 20000.0; optMTMCalculationCid = None
  _ <- submit ccp do exerciseCmd bob.clearingServiceCid Clearing.TransferFromProvider with depositCids = [ccpAssetDepositCid]; amount = 2000.0

  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 0.0

  return ()

depositsQuantityEquals : Party -> Account -> Decimal -> Script Bool
depositsQuantityEquals party account amount = do
  marginCids <- map fst . filter (\(_,d) -> d.account == account) <$> query @AssetDeposit party
  depositsQuantity <- getDepositQuantities party marginCids
  return $ amount == depositsQuantity

getDepositQuantities : Party -> [ContractId AssetDeposit] -> Script Decimal
getDepositQuantities party depositCids = do
  foldl (+) 0.0 <$> forA depositCids (\dcid -> do
      Some d <- queryContractId party dcid
      return d.asset.quantity)

