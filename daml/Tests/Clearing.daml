module Tests.Clearing where

import Daml.Script
import DA.Finance.Asset
import DA.Finance.Types
import Marketplace.Clearing.Model
import Marketplace.Clearing.Service qualified as Clearing

import Common
import DA.Action (void)

testClearingTransfers : Script ()
testClearingTransfers = do
  time <- getTime
  providers@Providers{ccp} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  -- Assets
  let
    cashAsset = usd with quantity = 20000.0

  alice <- onboardCustomer providers "Alice"
  bob   <- onboardCustomer providers "Bob"

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  bobDepositCid   <- depositAsset providers bob cashAsset bob.clearingAccount.id

  marginDepositCid   <- submit ccp do exerciseCmd alice.clearingServiceCid Clearing.TransferToMargin with depositCid = aliceDepositCid
  clearingDepositCid <- submit ccp do exerciseCmd alice.clearingServiceCid Clearing.TransferFromMargin with amount = 1000.0, marginDepositCids = [marginDepositCid]
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 19000.0

  -- bobMarginDepositCid <- submit ccp do exerciseCmd bob.clearingServiceCid Clearing.TransferToMargin with depositCid = bobDepositCid
  (Some providerDepositCid) <- submit ccp do exerciseCmd bob.clearingServiceCid Clearing.TransferToProvider with amount = 2000.0; optMTMCalculationCid = None; depositCids = [bobDepositCid]
  submit ccp do exerciseCmd alice.clearingServiceCid Clearing.TransferFromProvider with amount = 1000.0; optMTMCalculationCid = None; depositCids = [providerDepositCid]
  assert =<< depositsQuantityEquals alice.customer alice.clearingAccount 2000.0

  -- _ <- submit ccp do exerciseCmd bob.clearingServiceCid Clearing.TransferFromProvider with depositCids = [providerDepositCid]; amount = 2000.0

  return ()


testMarginCalls : Script ()
testMarginCalls = do
  time <- getTime
  providers@Providers{ccp; operator} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  -- Assets
  let cashAsset = usd with quantity = 20000.0

  alice <- onboardCustomer providers "Alice"
  bob   <- onboardCustomer providers "Bob"

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  calculationCid <- submit ccp $ createCmd MarginCalculation with
    customer = alice.customer; currency = "USD"; targetAmount = 4000.0
    calculationTime = time; calculationId = "123456"; accountId = alice.marginAccount.id; ..

  (Some marginDepositCid) <- submit ccp $
    exerciseCmd alice.clearingServiceCid Clearing.PerformMarginFill
      with depositCids = [aliceDepositCid]; marginDepositCids = []; ..
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 4000.0

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id

  calculationCid <- submit ccp $ createCmd MarginCalculation with
    customer = alice.customer; currency = "USD"; targetAmount = 1000.0
    calculationTime = time; calculationId = "456789"; accountId = alice.marginAccount.id; ..

  (Some marginDepositCid2) <- submit ccp $
    exerciseByKeyCmd @Clearing.Service (operator, ccp, alice.customer) Clearing.PerformMarginFill
      with depositCids = [aliceDepositCid]; marginDepositCids = [marginDepositCid]; ..
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 1000.0

  -- Fail margin calculation
  calculationCid <- submit ccp $ createCmd MarginCalculation with
    customer = alice.customer; currency = "USD"; targetAmount = 50000.0
    calculationTime = time; calculationId = "34567"; accountId = alice.marginAccount.id; ..

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  void $ submit ccp $
    exerciseByKeyCmd @Clearing.Service (operator, ccp, alice.customer) Clearing.PerformMarginFill
      with depositCids = [aliceDepositCid]; marginDepositCids = [marginDepositCid2]; ..
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 1000.0

  (Some (_,aliceStanding)) <- queryContractKey @MemberStanding ccp (ccp, alice.customer)
  assert $ not aliceStanding.marginSatisfied

  return ()

testMarkToMarket : Script ()
testMarkToMarket = do
  time <- getTime
  providers@Providers{ccp} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  -- Assets
  let cashAsset = usd with quantity = 20000.0

  alice <- onboardCustomer providers "Alice"
  bob   <- onboardCustomer providers "Bob"

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  bobDepositCid   <- depositAsset providers bob cashAsset bob.clearingAccount.id

  Some ccpAssetDepositCid <- submit ccp $
    exerciseCmd alice.clearingServiceCid Clearing.TransferToProvider
      with amount = 5000.0; depositCids = [aliceDepositCid]; optMTMCalculationCid = None

  _ <- submit ccp $
    exerciseCmd bob.clearingServiceCid Clearing.TransferFromProvider
      with depositCids = [ccpAssetDepositCid]; optMTMCalculationCid = None; amount = 2000.0

  assert =<< depositsQuantityEquals alice.customer alice.clearingAccount 15000.0
  assert =<< depositsQuantityEquals bob.customer bob.clearingAccount 22000.0

  return ()

-- |Check if the given account has deposits equaling the given amount
depositsQuantityEquals : Party -> Account -> Decimal -> Script Bool
depositsQuantityEquals party account amount = do
  accountQuantity <- getDepositQuantities party =<< getDepositsForAccount party account
  return $ amount == accountQuantity

getDepositsForAccount : Party -> Account -> Script [ContractId AssetDeposit]
getDepositsForAccount party account = map fst . filter (\(_,d) -> d.account == account) <$> query @AssetDeposit party

getDepositQuantities : Party -> [ContractId AssetDeposit] -> Script Decimal
getDepositQuantities party depositCids = do
  foldl (+) 0.0 <$> forA depositCids (\dcid -> do
      Some d <- queryContractId party dcid
      return d.asset.quantity)

