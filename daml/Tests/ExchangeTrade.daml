module Tests.ExchangeTrade where

import Common
import Daml.Script
import DA.Finance.Types (Id(..), Asset(..))
import DA.Next.Set
import qualified Marketplace.Matching as Matching
import qualified Marketplace.Settlement as Settlement
import qualified Marketplace.Trading as Trading

setup : Script ()
setup = do
  cr@CommonContracts{..} <- onboardCommon

  -- Assets
  let
    shareId = Id with signatories = fromList [ custodian ]; label = "JPM"; version = 0
    cashId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
    shareAsset = Asset with id = shareId; quantity = 200.0
    cashAsset = Asset with id = cashId; quantity = 20000.0
    priceAsset = Asset with id = cashId; quantity = 100.0

  alice <- onboardCustomer cr "Alice" shareAsset
  bob <- onboardCustomer cr "Bob" cashAsset

  -- > Alice places a bid for JPM
  (aliceCreateOrderRequestCid, _) <- submit alice.customer do
    exerciseByKeyCmd @Trading.Service (operator, exchange, alice.customer) Trading.RequestCreateOrder
      with
        market = "JPMUSD"
        asset = shareAsset
        price = priceAsset
        isBid = True
        depositCid = alice.assetDepositCid
  aliceOrderCid <- submit exchange do exerciseByKeyCmd @Trading.Service (operator, exchange, alice.customer) Trading.CreateOrder with id = 123; createOrderRequestCid = aliceCreateOrderRequestCid

  -- > Bob places a new offer for BTC
  (bobCreateOrderRequestCid, _) <- submit bob.customer do
    exerciseByKeyCmd @Trading.Service (operator, exchange, bob.customer) Trading.RequestCreateOrder
      with
        market = "JPMUSD"
        asset = shareAsset
        price = priceAsset
        isBid = False
        depositCid = bob.assetDepositCid
  bobOrderCid <- submit exchange do exerciseByKeyCmd @Trading.Service (operator, exchange, bob.customer) Trading.CreateOrder with id = 456; createOrderRequestCid = bobCreateOrderRequestCid

  -- Exchange matches the two orders
  (dvpCid, deliverySettlementInstructionCid, paymentSettlmentInstructionCid) <- submit exchange do
    exerciseCmd matchingServiceCid Matching.MatchOrders
      with
        matchId = "789"
        makerOrderCid = aliceOrderCid
        takerOrderCid = bobOrderCid
        filledQuantity = 200.0
        filledPrice = 100.0
      
  submit exchange do
    exerciseCmd settlementServiceCid Settlement.SettleTrade
      with
        dvpCid = dvpCid
        deliveryInstructionCids = [ deliverySettlementInstructionCid ]
        paymentInstructionCids = [ paymentSettlmentInstructionCid ]

  pure ()
