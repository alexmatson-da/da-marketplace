module Tests.Distribution.Auction where

-- import DA.Assert
-- import DA.Foldable qualified as F
-- import DA.List
-- import DA.Next.Set hiding (filter, null)
-- import DA.Date
-- import DA.Finance.Asset
-- import DA.Finance.Types
-- import DA.Optional
-- import Daml.Script
-- import Common
-- import Marketplace.Distribution.Distributor qualified as Distributor
-- import Marketplace.Distribution.Auction.Model qualified as Auction
-- import Marketplace.Distribution.Auction.Service qualified as Auction
-- import Marketplace.Distribution.Bidding.Model qualified as Bidding
-- import Marketplace.Distribution.Bidding.Service qualified as Bidding
-- import Marketplace.Settlement qualified as Settle

-- setup : Script ([Customer], [AssetDeposit], Customer, Party, ContractId Auction.T, ContractId Auction.S, [ContractId Bidding.R])
-- setup = do
--   providers@Providers{..} <- onboardProviders
--   assets@Assets{..} <- onboardAssets providers

--   -- Create our Investors/Bidders
--   let
--     cashId = Id with signatories = fromList [ bank ]; label = "USD"; version = 0
--     cashAsset = Asset with id = cashId; quantity = 0.0

--   issuer      <- onboardCustomer providers "Issuer"
--   alice       <- onboardCustomer providers "Alice"
--   bob         <- onboardCustomer providers "Bob"
--   charlie     <- onboardCustomer providers "Charlie"
--   dave        <- onboardCustomer providers "Dave"
--   aliceUsd    <- depositAsset providers alice     (usd with quantity = 10000.0) alice.mainAccount.id
--   bobUsd      <- depositAsset providers bob       (usd with quantity = 5000.0) bob.mainAccount.id
--   charlieUsd  <- depositAsset providers charlie   (usd with quantity = 2000.0) charlie.mainAccount.id
--   daveUsd     <- depositAsset providers dave      (usd with quantity = 1000.0) dave.mainAccount.id

--   Some aliceDeposit   <- queryContractId alice.customer aliceUsd
--   Some bobDeposit     <- queryContractId bob.customer bobUsd
--   Some charlieDeposit <- queryContractId charlie.customer charlieUsd
--   Some daveDeposit    <- queryContractId dave.customer daveUsd
--   let
--     parties = [alice, bob, charlie, dave]
--     originalDeposits = [aliceDeposit, bobDeposit, charlieDeposit, daveDeposit]

--   -- Create our Issuer with their new asset to distribute
--   let
--     auctionAssetId = Id with signatories = fromList [ bank ]; label = "AuctionAsset"; version = 0
--     auctionAsset = Asset with id = auctionAssetId; quantity = 1000.0
--   issuer <- onboardCustomer providers "Issuer"
--   issuerAsset <- depositAsset providers issuer auctionAsset issuer.mainAccount.id
--   auctionOfferCid <- bank `submit` exerciseCmd distributorRoleCid Distributor.OfferAuctionService with customer = issuer.customer; ..
--   auctionServiceCid <- issuer.customer `submit` exerciseCmd auctionOfferCid Auction.Accept with allocationAccount = issuer.auctionAccount; receivableAccount = issuer.tradingAccount

--   -- Create an Auction request and approve it
--   let
--     auctionId = "MyAuction"
--     quotedAssetId = Id with signatories = fromList [ bank, issuer.customer ]; label = "USD"; version = 0
--   createAuctionRequestCid <- issuer.customer `submit` exerciseCmd auctionServiceCid Auction.RequestCreateAuction with
--       asset = auctionAsset
--       assetDepositCid = issuerAsset
--       floorPrice = 5.0
--       ..
--   auctionCid <- bank `submit` exerciseCmd auctionServiceCid Auction.CreateAuction with ..

--   -- Add our parties as bidders
--   bidRequests@[aliceBidRequestCid, bobBidRequestCid, charlieBidRequestCid, daveBidRequestCid] <- forA parties \party ->
--       bank `submit` exerciseCmd party.biddingServiceCid Bidding.RequestBid with issuer = issuer.customer; asset = auctionAsset; ..

--   pure (parties, originalDeposits, issuer, bank, auctionCid, auctionServiceCid, bidRequests)

-- auctionAndBidsFullyAllocated : Script ()
-- auctionAndBidsFullyAllocated = do
--   (parties, originalDeposits, issuer, bank, auctionCid, auctionServiceCid, bidRequests) <- setup

--   -- Create our bids
--   now <- getTime
--   bidDetails@[aliceBidDetails, bobBidDetails, charlieBidDetails, daveBidDetails] <- forA [(10.0, 500.0, now), (11.0, 300.0, now), (12.0, 150.0, now), (13.0, 50.0, now)] \(price, quantity, time) -> pure $ Bidding.Details with price; quantity; time
--   bidCids@[aliceBidCid, bobBidCid, charlieBidCid, daveBidCId] <- forA (zip3 parties bidRequests bidDetails) \(party, bidRequestCid, details@Bidding.Details{..}) ->
--       party.customer `submit` exerciseCmd party.biddingServiceCid Bidding.SubmitBid with
--           depositCid = party.assetDepositCid
--           allowPublishing = False
--           ..

--   -- Kick off the auction
--   (auctionCid, siCids) <- bank `submit` exerciseCmd auctionServiceCid Auction.ProcessAuction with ..

--   -- Assertions
--   length siCids === 4
--   auction <- fromSome <$> queryContractId bank auctionCid
--   auction.status === Auction.FullyAllocated with finalPrice = 10.0
--   bids <- query @Bidding.Bid bank
--   all ((\bid -> bid.status == Bidding.FullAllocation with price = 10.0) . snd) bids === True

--   -- Settle
--   depositCids <- forA siCids \siCid -> bank `submit` exerciseCmd siCid Settle.Settle

--   -- Settlement Assertions
--   auction <- snd . head <$> query @Auction.Auction bank
--   issuerPayments <- queryFilter @AssetDeposit issuer.customer (\deposit -> deposit.account == issuer.awayAccount && deposit.asset.id.label == auction.quotedAssetId.label) >>= \deposits -> pure . snd $ unzip deposits
--   assertAuctionMatchesPayments auction issuerPayments
--   F.forA_ bids \(_, bid) -> do
--     case bid.status of
--       Bidding.FullAllocation price -> do
--         assertAssetDeposits auction issuer originalDeposits price bid.details.quantity bid
--       _ -> pure ()
--     pure ()


-- auctionParticallyAllocatedOneBidFullyAllocated : Script ()
-- auctionParticallyAllocatedOneBidFullyAllocated = do
--   (parties@[alice, bob, charlie, dave], originalDeposits, issuer, bank, auctionCid, auctionServiceCid, bidRequests) <- setup

--   -- Create our bids
--   now <- getTime
--   bidDetails@[aliceBidDetails, bobBidDetails, charlieBidDetails, daveBidDetails] <- forA [(10.0, 500.0, now), (1.0, 300.0, now), (2.0, 200.0, now), (3.0, 100.0, now)] \(price, quantity, time) -> pure $ Bidding.Details with price; quantity; time
--   bidCids@[aliceBidCid, bobBidCid, charlieBidCid, daveBidCId] <- forA (zip3 parties bidRequests bidDetails) \(party, bidRequestCid, details@Bidding.Details{..}) ->
--       party.customer `submit` exerciseCmd party.biddingServiceCid Bidding.SubmitBid with
--           depositCid = party.assetDepositCid
--           allowPublishing = False
--           ..

--   -- Kick off the auction
--   (auctionCid, siCids) <- bank `submit` exerciseCmd auctionServiceCid Auction.ProcessAuction with ..

--   -- Assertions
--   length siCids === 1
--   auction <- fromSome <$> queryContractId bank auctionCid
--   auction.status === Auction.PartiallyAllocated with finalPrice = 10.0; remaining = 500.0
--   bids <- query @Bidding.Bid bank
--   length (filter ((\bid -> bid.status == Bidding.FullAllocation with price = 10.0) . snd) bids) === 1
--   let fullAllocationParty = (.customer) . snd . head $ filter ((\bid -> bid.status == Bidding.FullAllocation with price = 10.0) . snd) bids
--   fullAllocationParty === alice.customer
--   length (filter ((\bid -> bid.status == Bidding.Invalid) . snd) bids) === 3

--   -- Settle
--   depositCids <- forA siCids \siCid -> bank `submit` exerciseCmd siCid Settle.Settle

--   -- Settlement Assertions
--   auction <- snd . head <$> query @Auction.Auction bank
--   issuerPayments <- queryFilter @AssetDeposit issuer.customer (\deposit -> deposit.account == issuer.awayAccount && deposit.asset.id.label == auction.quotedAssetId.label) >>= \deposits -> pure . snd $ unzip deposits
--   assertAuctionMatchesPayments auction issuerPayments
--   F.forA_ bids \(_, bid) -> do
--     case bid.status of
--       Bidding.FullAllocation price -> do
--         assertAssetDeposits auction issuer originalDeposits price bid.details.quantity bid
--       _ -> pure ()
--     pure ()

-- auctionFullyAllocatedBidsParticallyAllocated : Script ()
-- auctionFullyAllocatedBidsParticallyAllocated = do
--   (parties, originalDeposits, issuer, bank, auctionCid, auctionServiceCid, bidRequests) <- setup

--   -- Create our bids
--   now <- getTime
--   bidDetails@[aliceBidDetails, bobBidDetails, charlieBidDetails, daveBidDetails] <- forA [(10.0, 500.0, now), (11.0, 400.0, now), (12.0, 150.0, now), (11.0, 50.0, now)] \(price, quantity, time) -> pure $ Bidding.Details with price; quantity; time
--   bidCids@[aliceBidCid, bobBidCid, charlieBidCid, daveBidCId] <- forA (zip3 parties bidRequests bidDetails) \(party, bidRequestCid, details@Bidding.Details{..}) ->
--       party.customer `submit` exerciseCmd party.biddingServiceCid Bidding.SubmitBid with
--           depositCid = party.assetDepositCid
--           allowPublishing = False
--           ..

--   -- Kick off the auction
--   (auctionCid, siCids) <- bank `submit` exerciseCmd auctionServiceCid Auction.ProcessAuction with ..

--   -- Assertions
--   length siCids === 4
--   auction <- fromSome <$> queryContractId bank auctionCid
--   auction.status === Auction.FullyAllocated with finalPrice = 10.0
--   bids <- query @Bidding.Bid bank
--   length (filter ((\bid -> bid.status == Bidding.FullAllocation with price = 10.0) . snd) bids) === 3
--   length (filter ((\bid -> bid.status == Bidding.PartialAllocation with price = 10.0; quantity = 400.0) . snd) bids) === 1

--   -- Settle
--   depositCids <- forA siCids \siCid -> bank `submit` exerciseCmd siCid Settle.Settle

--   -- Settlement Assertions
--   auction <- snd . head <$> query @Auction.Auction bank
--   issuerPayments <- queryFilter @AssetDeposit issuer.customer (\deposit -> deposit.account == issuer.awayAccount && deposit.asset.id.label == auction.quotedAssetId.label) >>= \deposits -> pure . snd $ unzip deposits
--   assertAuctionMatchesPayments auction issuerPayments
--   F.forA_ bids \(_, bid) -> do
--     case bid.status of
--       Bidding.FullAllocation price -> do
--         assertAssetDeposits auction issuer originalDeposits price bid.details.quantity bid
--       Bidding.PartialAllocation price quantity -> do
--         assertAssetDeposits auction issuer originalDeposits price quantity bid
--       _ -> pure ()
--     pure ()

-- auctionNoBidsAboveFloorPrice : Script ()
-- auctionNoBidsAboveFloorPrice = do
--   (parties, originalDeposits, issuer, bank, auctionCid, auctionServiceCid, bidRequests) <- setup

--   -- Create our bids
--   now <- getTime
--   bidDetails@[aliceBidDetails, bobBidDetails, charlieBidDetails, daveBidDetails] <- forA [(1.0, 500.0, now), (2.0, 300.0, now), (3.0, 100.0, now), (4.0, 100.0, now)] \(price, quantity, time) -> pure $ Bidding.Details with price; quantity; time
--   bidCids@[aliceBidCid, bobBidCid, charlieBidCid, daveBidCId] <- forA (zip3 parties bidRequests bidDetails) \(party, bidRequestCid, details@Bidding.Details{..}) ->
--       party.customer `submit` exerciseCmd party.biddingServiceCid Bidding.SubmitBid with
--           depositCid = party.assetDepositCid
--           allowPublishing = False
--           ..

--   -- Kick off the auction
--   (auctionCid, siCids) <- bank `submit` exerciseCmd auctionServiceCid Auction.ProcessAuction with ..

--   -- Assertions
--   siCids === []
--   auction <- fromSome <$> queryContractId bank auctionCid
--   auction.status === Auction.NoValidBids
--   bids <- query @Bidding.Bid bank
--   all ((\bid -> bid.status == Bidding.Invalid) . snd) bids === True

-- depositsDontCoverBids : Script ()
-- depositsDontCoverBids = do
--   (parties, originalDeposits, issuer, bank, auctionCid, auctionServiceCid, bidRequests) <- setup

--   now <- getTime
--   bidDetails@[aliceBidDetails, bobBidDetails, charlieBidDetails, daveBidDetails] <- forA [(10000.0, 500.0, now), (1000.0, 300.0, now), (1000.0, 100.0, now), (1000.0, 100.0, now)] \(price, quantity, time) -> pure $ Bidding.Details with price; quantity; time
--   bidCids@[aliceBidCid, bobBidCid, charlieBidCid, daveBidCId] <- forA (zip3 parties bidRequests bidDetails) \(party, bidRequestCid, details@Bidding.Details{..}) ->
--       party.customer `submitMustFail` exerciseCmd party.biddingServiceCid Bidding.SubmitBid with
--           depositCid = party.assetDepositCid
--           allowPublishing = False
--           ..

--   pure ()

-- assertAssetDeposits : Auction.Auction -> Customer -> [AssetDeposit] -> Decimal -> Decimal -> Bidding.Bid -> Script ()
-- assertAssetDeposits auction issuer originalDeposits price quantity bid = do
--   -- Correct Distribution of new asset check
--   deposit <- snd . head <$> queryFilter @AssetDeposit bid.customer (\deposit -> deposit.account == bid.tradingAccount && deposit.asset.id == bid.assetId)
--   assertMsg "Distribution quantity incorrect" (deposit.asset.quantity == quantity)
--   -- Correct Payment to issuer check
--   issuerPayment <- queryFilter @AssetDeposit issuer.customer (\deposit ->
--     deposit.account == issuer.mainAccount && deposit.asset.id.label == auction.quotedAssetId.label && deposit.asset.quantity == quantity * price)
--   assertMsg "No valid payment to issuer" (not $ null issuerPayment)
--   -- If Investor/Bidder original deposit is split -> Check deposit contains the correct remaining amount
--   quotedDeposit <- queryFilter @AssetDeposit bid.customer (\deposit -> deposit.account == bid.tradingAccount && deposit.asset.id == auction.quotedAssetId)
--   case quotedDeposit of
--     ([(_, x)]) -> do
--       let originalDeposit = filter (\deposit -> deposit.account.owner == x.account.owner) originalDeposits
--       assertMsg "Investor/Bidder split deposit contains incorrect quantity" (x.asset.quantity == (bid.details.quantity * price))
--     _ -> pure ()

-- assertAuctionMatchesPayments : Auction.Auction -> [AssetDeposit] -> Script ()
-- assertAuctionMatchesPayments auction issuerPayments = do
--   case auction.status of
--     Auction.FullyAllocated price               -> auction.asset.quantity * price === foldr (\payment acc -> payment.asset.quantity + acc) 0.0 issuerPayments
--     Auction.PartiallyAllocated price remaining -> (auction.asset.quantity - remaining) * price === foldr (\payment acc -> payment.asset.quantity + acc) 0.0 issuerPayments
--     _ -> pure ()

-- bidSortingTest : Script ()
-- bidSortingTest = do

--   let
--     bid1 = Bidding.Details with price = 2.0; quantity = 1.0; time = datetime 2021 Jan 1 0 0 0
--     bid2 = Bidding.Details with price = 1.0; quantity = 2.0; time = datetime 2021 Jan 1 1 0 0
--     bid3 = Bidding.Details with price = 1.0; quantity = 1.0; time = datetime 2021 Jan 1 1 1 0
--     bid4 = Bidding.Details with price = 1.0; quantity = 1.0; time = datetime 2021 Jan 1 1 1 1
--     bids = [bid3, bid2, bid1, bid4]

--   sortOn Down bids === [bid1, bid2, bid3, bid4]
