module Tests.BinaryOption where
-- ^ This module tests the full lifecycle of a binary option

import Common (onboardCommon, onboardCustomer)
import ContingentClaims.Claim (serialize, cond, one, Claim(Zero))
import ContingentClaims.FinancialClaim (european)
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation qualified as O
import DA.Date (date, datetime, Month(Mar))
import DA.Finance.Types (Id(..), Asset(..))
import DA.Finance.Asset.Settlement (AssetSettlementRule(..), AssetSettlement_AddController(..))
import Daml.Script
import DA.Next.Set qualified as Set
import DA.Next.Map qualified as Map
import Marketplace.Issuance (RequestOrigination(..), Originate(..), RequestCreateIssuance(..), CreateIssuance(..))
import Marketplace.Custody (RequestTransferDeposit(..), TransferDeposit(..), RequestLifecycle(..), Lifecycle(..), RequestCreditAccount(..), CreditAccount(..))
import DA.Functor (void)


endToEnd: Script ()
endToEnd = do
  common <- onboardCommon

  let optionId = Id with 
                   signatories = Set.singleton common.custodian
                   label = "TSLA Mar21 910.0"
                   version = 0
      usdId = Id with
                signatories = Set.singleton common.custodian
                label = "USD"
                version = 0
      usdAsset = Asset with id = usdId, quantity = 100.0
      underlyingId = Id with
                       signatories = Set.singleton common.custodian
                       label = "TSLA"
                       version = 0
      underlyingAsset = Asset with id = underlyingId, quantity = 200.0

      -- TODO: refactor into a more composable form and add to contingent-claims lib
      binary : Decimal -> Text -> Id -> Claim O.Observation Date Id 
      binary strike spot ccy = cond (O.pure strike O.<= O.observe spot) Zero (one ccy)

  alice <- onboardCustomer common "Alice" usdAsset -- this is weird - we should be first issuing asset
  bob <- onboardCustomer common "Bob" usdAsset

  -- Alice originates the option
  origReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid RequestOrigination with
      assetLabel = optionId.label
      assetSignatories = optionId.signatories
      safekeepingAccountId = alice.safekeepingAccountId
      description = "TSLA March 2021 binary call option, strike 910.0$"
      issuer = alice.customer
      claims = serialize $ european (date 2020 Mar 18) (binary 910.0 underlyingId.label usdId)
  optionDescCid <- submit common.custodian $ exerciseCmd alice.issuanceServiceCid $ Originate origReqCid

  -- Alice issues the option
  createReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid 
    RequestCreateIssuance with
      issuanceId = "Myissuance"
      accountId = Id (Set.fromList [alice.customer, common.custodian]) alice.safekeepingAccountId.label 0
      assetId = optionId
      quantity = 1000.0
  (_issuanceCid, optionDepositCid) <- submit common.custodian $ exerciseCmd alice.issuanceServiceCid $ CreateIssuance createReqCid

  -- Alice gifts the option to Bob
  addProvider <- submit bob.customer $ exerciseByKeyCmd @AssetSettlementRule bob.tradingAccountId AssetSettlement_AddController with ctrl = alice.customer
  xferReqCid <- submit alice.customer $ exerciseCmd alice.custodyServiceCid RequestTransferDeposit with accountId = alice.safekeepingAccountId, receiverAccountId = bob.tradingAccountId, depositCid = optionDepositCid
  optionDepositCid <- submit common.custodian $ exerciseCmd alice.custodyServiceCid $ TransferDeposit xferReqCid

  -- The option expires at maturity
  setTime $ datetime 2020 Mar 18 16 30 00

  -- The issuer, Alice, must deposit the payout in the safekeeping account
  corpActReqCid <- submit alice.customer $ exerciseCmd alice.custodyServiceCid RequestCreditAccount with
    accountId = alice.safekeepingAccountId
    asset = usdAsset
  corpActDepositCid <- submit common.custodian $ exerciseCmd alice.custodyServiceCid CreditAccount with 
    creditAccountRequestCid = corpActReqCid

  -- Bob exercises the Option
  lifecycleReqCid <- submit bob.customer $ exerciseCmd bob.custodyServiceCid RequestLifecycle with
    assetDepositCid = optionDepositCid
    postAssetVersion = 2 -- TODO: How do we get this in practice? From a UI?
  void $ submit common.custodian $ exerciseCmd bob.custodyServiceCid $ Lifecycle with
    safekeepingDepositCid = corpActDepositCid -- TODO: how do we get this in practice?
    lifecycleRequestCid = lifecycleReqCid
    fixings = Map.fromList [ ("TSLA", Map.insert (date 2020 Mar 18) 920.0 Map.empty) ]
