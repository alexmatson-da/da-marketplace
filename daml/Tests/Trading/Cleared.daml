module Tests.Trading.Cleared where

import Daml.Script
import Common
import DA.Assert ((===))
import DA.Either
import Marketplace.Trading.Service qualified as Trading
import Marketplace.Trading.Model qualified as Order
import Marketplace.Trading.Matching.Service qualified as Matching
import Marketplace.Clearing.Role qualified as Clearing
import Marketplace.Clearing.Model qualified as Clearing
import Marketplace.Clearing.Service qualified as Clearing
import Marketplace.Clearing.Market.Service qualified as ClearedMarket
import Marketplace.Listing.Service qualified as Listing

import DA.Finance.Types
import DA.Foldable (mapA_)
import DA.Next.Set qualified as Set
import DA.List (head)

checkOrderStatusMatches : ContractId Order.T -> Party -> Order.Status -> Script ()
checkOrderStatusMatches orderCid party status = do
  Some order <- queryContractId @Order.T party orderCid
  order.status === status
  pure ()

clearedTradingTest : Script ()
clearedTradingTest = do
  providers@Providers{operator; exchange; matchingServiceCid; clearinghouse, clearingRoleCid, bank, public} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  let
    shareAsset = tsla with quantity = 200.0
    cashAsset = usd with quantity = 20000.0
  alice <- onboardCustomer providers "Alice"
  bob <- onboardCustomer providers "Bob"
  carl <- onboardCustomer providers "Carl"

  -- Terminate Carl's relationship with the clearing house for further testing
  submit carl.customer $ exerciseCmd carl.clearingServiceCid Clearing.Terminate with ctrl = carl.customer

  let
    listingId = "TSLAUSD"
    listingType = Listing.ClearedRequest clearinghouse
    calendarId = "1261007448"
    description = "Tesla Inc."
    tradedAssetId = tsla.id
    quotedAssetId = usd.id
    tradedAssetPrecision = 2
    quotedAssetPrecision = 2
    minimumTradableQuantity = 1.0
    maximumTradableQuantity = 1000000.0
    providerId = "123"
    observers = []

  -- List a Security to trade
  (listingServiceCid, _) <- head <$> query @Listing.Service alice.customer
  createListingRequestCid <- alice.customer `submit` do exerciseCmd listingServiceCid Listing.RequestCreateListing with ..

  -- !!>> Exchange cannot create listing without being a customer of the clearinghouse
  listingCid <- exchange `submitMustFail` do exerciseCmd listingServiceCid Listing.CreateListing with ..

  -- > Setup clearing market service
  marketServiceOfferCid <- submit clearinghouse do exerciseCmd clearingRoleCid Clearing.OfferMarketService with customer = exchange, ..
  marketServiceCid <- submit exchange do exerciseCmd marketServiceOfferCid ClearedMarket.Accept

  listingCid <- exchange `submit` do exerciseCmd listingServiceCid Listing.CreateListing with ..

  -- t>> trigger adds standing
  mssCids <- map fst <$> query @Clearing.MemberStanding clearinghouse
  mapA_ (\cid -> submit clearinghouse $ exerciseCmd cid Clearing.MemberStanding_AddObservers  with newObservers = Set.fromList [exchange]) mssCids

  standing <- submit exchange do exerciseCmd marketServiceCid ClearedMarket.RequestMemberStanding with member = alice.customer

  -- Create orders
  let aliceOrderId = Id with signatories = Set.fromList [ alice.customer ], label = "1", version = 0
  Right (aliceOrderCid, aliceCreateOrderRequestCid, aliceAssetDepositCid) <- alice.customer `submit` do
    exerciseCmd alice.tradingServiceCid Trading.RequestCreateClearedOrder with
        clearinghouse = clearinghouse
        details = Order.Details with
            id = aliceOrderId
            symbol = listingId
            asset = tsla with quantity = 200.0
            side = Order.Sell
            timeInForce = Order.GTC
            orderType = Order.Limit with price = 100.0
  checkOrderStatusMatches aliceOrderCid alice.customer Order.New

  -- Have Bob fail a margin call
  calculationCid <- submit clearinghouse $
    exerciseCmd bob.clearingServiceCid Clearing.CreateMarginCalculation with
      currency = "USD"; targetAmount = 50_000.0; calculationId = "34556"

  submit clearinghouse $
    exerciseByKeyCmd @Clearing.Service (operator,clearinghouse,bob.customer) Clearing.PerformMarginFill
      with depositCids = []; marginDepositCids = []; ..

  -- !!>> Bob is in bad standing, so the order should fail
  let bobOrderId = Id with signatories = Set.fromList [ bob.customer ], label = "2", version = 0
  bobOrderResult <- bob.customer `submit` do
    exerciseCmd bob.tradingServiceCid Trading.RequestCreateClearedOrder with
        clearinghouse = clearinghouse
        details = Order.Details with
            id = bobOrderId
            symbol = listingId
            asset = shareAsset
            side = Order.Buy
            timeInForce = Order.GTC
            orderType = Order.Limit with price = 100.0
  assert $ isLeft bobOrderResult

  -- !!>> Carl is not a member of the clearinghouse, so Carl should not be able to place an order
  let carlOrderId = Id with signatories = Set.fromList [ carl.customer ], label = "3", version = 0
  carlOrderResult <- carl.customer `submit` do
    exerciseCmd carl.tradingServiceCid Trading.RequestCreateClearedOrder with
        clearinghouse = clearinghouse
        details = Order.Details with
            id = carlOrderId
            symbol = listingId
            asset = shareAsset
            side = Order.Buy
            timeInForce = Order.GTC
            orderType = Order.Limit with price = 100.0
  assert $ isLeft carlOrderResult

  return ()
