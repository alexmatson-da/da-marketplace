module Setup.Clearing where

import Daml.Script

import Marketplace.Custodian
import Marketplace.Exchange
import Marketplace.ExchangeParticipant
import Marketplace.Investor
import Marketplace.Issuer
import Marketplace.Operator

import Marketplace.Derivative
import Marketplace.CentralCounterparty
import Marketplace.CentralCounterpartyCustomer

import Marketplace.Trading
import Marketplace.Transfer

import DA.Finance.Asset
import DA.Finance.Types

import DA.Action
import DA.Foldable (forA_)

import DA.Next.Set

data LedgerParties = LedgerParties with
  userAdmin : Party -- ^DABL uses 'UserAdmin' for 'Operator'
  public    : Party
  custodian : Party
  exchange  : Party
  issuer    : Party
  alice     : Party
  bob       : Party
  carl      : Party
  dana      : Party
  ccp       : Party
    deriving (Eq, Show)

allocateParties : Script LedgerParties
allocateParties = do
  operator <- allocatePartyWithHint "Operator" (PartyIdHint "Operator")
  issuer <- allocatePartyWithHint "Issuer" (PartyIdHint "Issuer")
  custodian <- allocatePartyWithHint "Custodian" (PartyIdHint "Custodian")
  exchange <- allocatePartyWithHint "Exchange" (PartyIdHint "Exchange")
  broker <- allocatePartyWithHint "Broker" (PartyIdHint "Broker")
  ccp <- allocatePartyWithHint "Ccp" (PartyIdHint "Ccp")
  public <- allocatePartyWithHint "Public" (PartyIdHint "Public")
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  carl <- allocatePartyWithHint "Carl" (PartyIdHint "Carl")
  dana <- allocatePartyWithHint "Dana" (PartyIdHint "Dana")

  return $ LedgerParties operator public custodian exchange issuer alice bob carl dana ccp

setupClearing : Script ()
setupClearing = allocateParties >>= doSetupClearing

doSetupClearing : LedgerParties -> Script ()
doSetupClearing lp@(LedgerParties operator public custodian exchange issuer alice bob carl dana ccp) = do

  time <- getTime
  -- Onboard and create relationships
  handleOnboarding lp

  -- onbard investors
  onboardInvestor lp alice "Alice the Investor"
  onboardInvestor lp bob "Bob the Investor"
  onboardInvestor lp carl "Carl the Investor"
  onboardInvestor lp dana "Dana the Investor"

  let observers = [operator, public, custodian, exchange, issuer, ccp, alice, bob, carl, dana]

  usdTokenId <- createToken operator issuer "USD" "US Dollars" 2 observers

  h2oTokenId <- createToken operator issuer "H2O" "H2O" 2 observers

  h2oQ121DerId <- createSimpleDerivative operator issuer "H2OQ121" "H2O" "H2O Q1 21" 6 1 "h2o" h2oTokenId observers
  h2oQ221DerId <- createSimpleDerivative operator issuer "H2OQ221" "H2O" "H2O Q2 21" 6 1 "h2o" h2oTokenId observers
  h2oQ321DerId <- createSimpleDerivative operator issuer "H2OQ321" "H2O" "H2O Q3 21" 6 1 "h2o" h2oTokenId observers
  h2oQ421DerId <- createSimpleDerivative operator issuer "H2OQ421" "H2O" "H2O Q4 21" 6 1 "h2o" h2oTokenId observers
  -- h2oJan21DerId <- createSimpleDerivative operator issuer "H2OJAN21" "H2O" "H2O Jan 21" 6 1 "h2o" h2oTokenId observers
  -- h2oFeb21DerId <- createSimpleDerivative operator issuer "H2OFEB21" "H2O" "H2O Feb 21" 6 1 "h2o" h2oTokenId observers
  -- h2oMar21DerId <- createSimpleDerivative operator issuer "H2OMAR21" "H2O" "H2O Mar 21" 6 1 "h2o" h2oTokenId observers
  -- h20Apr21DerId <- createSimpleDerivative operator issuer "H2OAPR21" "H2O" "H2O APR 21" 6 1 "h2o" h2oTokenId observers
  -- h20May21DerId <- createSimpleDerivative operator issuer "H2OMAY21" "H2O" "H2O MAY 21" 6 1 "h2o" h2oTokenId observers
  -- h20Jun21DerId <- createSimpleDerivative operator issuer "H2OJUN21" "H2O" "H2O JUN 21" 6 1 "h2o" h2oTokenId observers

                                                     -- clearing   margin   custodian
  let setupAccount = setupInvestorAccount lp usdTokenId 100000.0   100.0    100000.0

  aliceAccts <- setupAccount alice
  bobAccts <- setupAccount bob
  carlAccts <- setupAccount carl
  danaAccts <- setupAccount dana

  -- ccp `submit` exerciseByKeyCmd @CCPCustomer (ccp,operator,alice) CCPCustomer_PerformMarginFill
  --   with amount = 100.0

  let tradePairs = [ (alice, bob, h2oQ421DerId, 50.0, 1000.0)
                   , (alice, carl, h2oQ421DerId, 10.0, 3000.0)
                   , (alice, dana, h2oQ221DerId, 34.0, 5044.0)
                   , (carl, bob, h2oQ321DerId, 10.0, 5044.0)
                   , (dana, alice, h2oQ121DerId, 10.0, 100.0)
                   , (bob, dana, h2oQ421DerId, 456.0, 1434.0) ]

  let trades = zipWith (createTrade ccp exchange) [1..(length tradePairs)] tradePairs

  tradeCids <- mapA (\t -> exchange `submit` createCmd t) trades
  forA_ tradeCids (\tCid -> ccp `submit` exerciseByKeyCmd @CCP (operator, ccp)
      CCP_NovateDerivativeTrade with derivativeTradeCid = tCid)

  let fairValuePairs = [ (h2oQ121DerId, 1000.0)
                       , (h2oQ221DerId, 1500.0)
                       , (h2oQ321DerId, 1200.0)
                       , (h2oQ421DerId, 1240.0) ]

  upTo <- getTime
  forA_ fairValuePairs $ \(derId, price) -> void $ makeFairValue exchange derId price usdTokenId upTo observers


testClearingResolution : Script ()
testClearingResolution = allocateParties >>= doTestClearingResolution

doTestClearingResolution : LedgerParties -> Script ()
doTestClearingResolution lp@(LedgerParties operator public custodian exchange issuer alice bob carl dana ccp) = do
  -- doSetupClearing lp
  handleOnboarding lp
  let observers = [operator, public, custodian, exchange, issuer, ccp, alice, bob, carl, dana]
  usdTokenId <- createToken operator issuer "USD" "US Dollars" 2 observers

  -- onbard investors
  onboardInvestor lp alice "Alice the Investor"
                                                -- clearing   margin   custodian
  aliceAccts <- setupInvestorAccount lp usdTokenId 100000.0   1000.0    100000.0 alice

  ccp `submit` exerciseByKeyCmd @CCPCustomer (ccp,operator,alice) CCPCustomer_PerformMarginFill
    with targetAmount = 800.0
  return ()

makeFairValue : Party -> Id -> Decimal -> Id -> Time -> [Party] -> Script (ContractId FairValue)
makeFairValue exchange assetId price currency upTo observers = do
  timestamp <- getTime
  exchange `submit` createCmd FairValue with observers = fromList observers, ..

onboardInvestor : LedgerParties -> Party -> Text-> Script ()
onboardInvestor lp investor name = do
  let name     = "default name"
      title    = "default title"
      issuerID = "default issuerID"
      location = "default location"

  let operator  = lp.userAdmin
      custodian = lp.custodian
      exchange  = lp.exchange
      ccp       = lp.ccp

  -- register investor
  inviteCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardInvestor with investor = investor, ..
  investorCid <- investor `submit` exerciseCmd inviteCid InvestorInvitation_Accept with isPublic = True, ..

  -- establish relationship with custodian
  relationshipRequestCid <- investor `submit` exerciseCmd investorCid Investor_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipRequestCid CustodianRelationshipRequest_Approve

  -- become exchange participant
  (_, exchInviteCid) <- exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = investor
  investor `submit` exerciseCmd exchInviteCid ExchangeParticipantInvitation_Accept

  return ()

data InvestorAccounts = InvestorAccounts with
    iaCustodian : ContractId AssetDeposit
    iaMargin : ContractId AssetDeposit
    iaClearing : ContractId AssetDeposit
  deriving (Show,Eq)

setupInvestorAccount : LedgerParties -> Id -> Decimal -> Decimal -> Decimal -> Party -> Script InvestorAccounts
setupInvestorAccount lp usdTokenId custodianAmount marginAmount clearingAmount investor = do

  let operator  = lp.userAdmin
      custodian = lp.custodian
      exchange  = lp.exchange
      ccp       = lp.ccp

  -- > deposit USD into Custodian account
  depositCid <- custodian `submit` exerciseByKeyCmd @Custodian (operator, custodian) Custodian_CreateDeposit
      with tokenId = usdTokenId, depositQuantity = clearingAmount, beneficiary = investor

  -- > allocate deposit to CCP for Clearing Account
  transferRequestCid <- investor `submit` exerciseByKeyCmd @Investor (operator, investor) Investor_AllocateToProvider
      with depositCids = [depositCid], amount = clearingAmount, provider = ccp
  clearingDepositCid <- custodian `submit` exerciseCmd transferRequestCid DepositTransferRequest_Approve

  -- > deposit USD into custodian account
  depositCid <- custodian `submit` exerciseByKeyCmd @Custodian (operator, custodian) Custodian_CreateDeposit
      with tokenId = usdTokenId, depositQuantity = marginAmount, beneficiary = investor

  -- > allocate deposit to CCP for Margin Account
  transferRequestCid <- investor `submit` exerciseByKeyCmd @Investor (operator, investor) Investor_AllocateToProvider
      with depositCids = [depositCid], amount = marginAmount, provider = ccp
  marginDepositCid <- custodian `submit` exerciseCmd transferRequestCid DepositTransferRequest_Approve

  -- > deposit more USD into custodian account
  custodianDepositCid <- custodian `submit` exerciseByKeyCmd @Custodian (operator, custodian) Custodian_CreateDeposit
      with tokenId = usdTokenId, depositQuantity = custodianAmount, beneficiary = investor

  ccpInviteCid <- ccp `submit` exerciseByKeyCmd @CCP (operator, ccp) CCP_InviteCustomer with ccpCustomer = investor
  ccpCustomerCid <- investor `submit` exerciseCmd ccpInviteCid CCPCustomerInvitation_Accept with clearingDepositCid, marginDepositCid

  return $ InvestorAccounts custodianDepositCid clearingDepositCid marginDepositCid

createToken : Party -> Party -> Text -> Text -> Int -> [Party] -> Script Id
createToken operator issuer name description quantityPrecision observers = do
  issuer `submit` exerciseByKeyCmd @Issuer (operator, issuer) Issuer_IssueToken with name, description, quantityPrecision, isPublic = True, observers
  return $ Id with signatories = fromList [ issuer ], label = name, version = 0

createSimpleDerivative : Party -> Party -> Text -> Text -> Text -> Int -> Int -> Text -> Id -> [Party] -> Script Id
createSimpleDerivative operator issuer prodSym prodCode description pricePrecision mult uom underlying observers = do
  let id = Id with signatories = fromList [ issuer ], label = prodSym, version = 0
  let derivative = Derivative with
        id
        pricePrecision
        description
        prodSym
        prodCode
        uuid = prodSym
        secType = FRA
        mmy = "YYYYMM"
        mult
        uom
        optionData = None
        underlying
        observers = fromList observers


  issuer `submit` createCmd derivative
  return id

handleOnboarding : LedgerParties -> Script ()
handleOnboarding lp@(LedgerParties operator public custodian exchange issuer alice bob carl dana ccp) = do
  let name = "default name"
      title = "default title"
      issuerID = "default issuerID"
      location = "default location"

  -- create operator
  operator `submit` createCmd Operator with ..

  -- onboard custodian
  custodianInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardCustodian with ..
  custodian `submit` exerciseCmd custodianInvCid CustodianInvitation_Accept with name = "Bank of Example", ..

  -- onboard issuers
  issuerInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardIssuer with ..
  issuerCid <- issuer `submit` exerciseCmd issuerInvCid IssuerInvitation_Accept with name = "Issuer", ..

  -- oboard exchange
  exchangeInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardExchange with ..
  exchangeCid <- exchange `submit` exerciseCmd exchangeInvCid ExchangeInvitation_Accept with name = "Exberry Exchange", ..

  -- onboard ccp
  ccpInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardCCP with ccp = ccp, ..
  (_,ccpCid) <- ccp `submit` exerciseCmd ccpInvCid CCPInvitation_Accept with name = "CCP", ..


  -- issuers establish a relationship with the custodian
  relationshipReqCid <- issuer `submit` exerciseCmd issuerCid Issuer_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve


  -- exchange establishes a relationship with the custodian
  relationshipReqCid <- exchange `submit` exerciseCmd exchangeCid Exchange_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve

  -- ccp establishes relationship with the custodian
  (relationshipReqCid, ccpRelationshipReqCid) <- ccp `submit` exerciseCmd ccpCid CCP_RequestCustodianRelationship
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve
  custodian `submit` exerciseCmd ccpRelationshipReqCid CCPCustodianRelationshipRequest_Approve


  -- exchange participants --


  return ()

createTrade : Party -> Party -> Int -> (Party, Party, Id, Decimal, Decimal) -> DerivativeTrade
createTrade ccp exchange currentId (buyer, seller, instrument, quantity, price) = DerivativeTrade with
      ccp = ccp
      exchange = exchange
      eventId = currentId + 50
      eventTimestamp = "1329834"
      instrument = instrument
      trackingNumber = currentId + 5000
      buyer = buyer
      buyerOrderId = currentId + 1000
      seller = seller
      sellerOrderId = currentId + 2000
      matchId = currentId
      executedQuantity = quantity
      executedPrice = price
